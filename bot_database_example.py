"""
–ü—Ä–∏–º–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π bot.py –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫ –∑–∞–º–µ–Ω–∏—Ç—å —Ñ–∞–π–ª–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞ —Ä–∞–±–æ—Ç—É —Å –ë–î
"""

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
from database import (
    get_user_by_telegram_id, create_user, get_user_categories, 
    add_expense, get_user_expenses, get_expenses_by_category,
    create_budget_plan, get_user_budget_plans, add_reminder, 
    get_user_reminders, get_user_setting, set_user_setting
)

# ============ –û–ë–ù–û–í–õ–ï–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò ============

def get_user_info(user_id: int) -> dict:
    """
    –ó–∞–º–µ–Ω—è–µ—Ç get_user_folder_path() –∏ get_user_folder_info()
    –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –ë–î
    """
    user = get_user_by_telegram_id(user_id)
    if not user:
        return None
    
    return {
        'id': user['id'],
        'telegram_id': user['telegram_id'],
        'username': user['username'],
        'folder_name': user['folder_name'],
        'role': user['role'],
        'created_at': user['created_at']
    }

def ensure_user_exists(user_id: int, username: str = None, folder_name: str = None) -> bool:
    """
    –ó–∞–º–µ–Ω—è–µ—Ç create_user_folder()
    –°–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    """
    user = get_user_by_telegram_id(user_id)
    if not user:
        return create_user(user_id, username, folder_name)
    return True

def load_user_categories(user_id: int) -> list:
    """
    –ó–∞–º–µ–Ω—è–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –∏–∑ user_categories.json
    –ü–æ–ª—É—á–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    """
    categories = get_user_categories(user_id)
    return [
        {
            'name': cat['category_name'],
            'type': cat['category_type'],
            'color': cat['color'],
            'icon': cat['icon']
        }
        for cat in categories
    ]

def add_expense_to_database(user_id: int, category_name: str, amount: float, 
                           description: str = None, expense_date: date = None) -> bool:
    """
    –ó–∞–º–µ–Ω—è–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ expenses.json
    –î–æ–±–∞–≤–ª—è–µ—Ç —Ä–∞—Å—Ö–æ–¥ –≤ –ë–î
    """
    # –ü–æ–ª—É—á–∞–µ–º ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –∏–º–µ–Ω–∏
    categories = get_user_categories(user_id)
    category_id = None
    for cat in categories:
        if cat['category_name'] == category_name:
            category_id = cat['id']
            break
    
    if not category_id:
        return False
    
    return add_expense(user_id, category_id, amount, description, expense_date)

def get_expenses_for_period(user_id: int, start_date: date = None, end_date: date = None) -> list:
    """
    –ó–∞–º–µ–Ω—è–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –∏–∑ expenses.json
    –ü–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ –ø–µ—Ä–∏–æ–¥ –∏–∑ –ë–î
    """
    expenses = get_user_expenses(user_id, start_date, end_date)
    return [
        {
            'amount': exp['amount'],
            'category': exp['category_name'],
            'description': exp['description'],
            'date': exp['date'].strftime('%Y-%m-%d'),
            'color': exp['color'],
            'icon': exp['icon']
        }
        for exp in expenses
    ]

def create_budget_plan_in_database(user_id: int, plan_data: dict) -> bool:
    """
    –ó–∞–º–µ–Ω—è–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ budget_plans.json
    –°–æ–∑–¥–∞–µ—Ç –ø–ª–∞–Ω –±—é–¥–∂–µ—Ç–∞ –≤ –ë–î
    """
    from datetime import datetime
    
    return create_budget_plan(
        user_id,
        plan_data['name'],
        plan_data['total_amount'],
        datetime.strptime(plan_data['start_date'], '%Y-%m-%d').date(),
        datetime.strptime(plan_data['end_date'], '%Y-%m-%d').date(),
        plan_data.get('categories')
    )

def load_user_budget_plans(user_id: int) -> list:
    """
    –ó–∞–º–µ–Ω—è–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –∏–∑ budget_plans.json
    –ü–æ–ª—É—á–∞–µ—Ç –ø–ª–∞–Ω—ã –±—é–¥–∂–µ—Ç–∞ –∏–∑ –ë–î
    """
    plans = get_user_budget_plans(user_id)
    return [
        {
            'id': plan['id'],
            'name': plan['plan_name'],
            'total_amount': float(plan['total_amount']),
            'spent_amount': float(plan['spent_amount']),
            'start_date': plan['start_date'].strftime('%Y-%m-%d'),
            'end_date': plan['end_date'].strftime('%Y-%m-%d'),
            'categories': plan['categories'],
            'is_active': plan['is_active']
        }
        for plan in plans
    ]

def add_reminder_to_database(user_id: int, reminder_data: dict) -> bool:
    """
    –ó–∞–º–µ–Ω—è–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ reminders.json
    –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –ë–î
    """
    from datetime import datetime
    
    return add_reminder(
        user_id,
        reminder_data['title'],
        reminder_data.get('description'),
        datetime.strptime(reminder_data['date'], '%Y-%m-%d').date(),
        datetime.strptime(reminder_data.get('time', '00:00'), '%H:%M').time(),
        reminder_data.get('recurring', False),
        reminder_data.get('pattern')
    )

def load_user_reminders(user_id: int) -> list:
    """
    –ó–∞–º–µ–Ω—è–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –∏–∑ reminders.json
    –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–∑ –ë–î
    """
    reminders = get_user_reminders(user_id)
    return [
        {
            'id': rem['id'],
            'title': rem['title'],
            'description': rem['description'],
            'date': rem['reminder_date'].strftime('%Y-%m-%d'),
            'time': rem['reminder_time'].strftime('%H:%M') if rem['reminder_time'] else '00:00',
            'recurring': rem['is_recurring'],
            'pattern': rem['recurring_pattern'],
            'completed': rem['is_completed']
        }
        for rem in reminders
    ]

def get_user_config(user_id: int) -> dict:
    """
    –ó–∞–º–µ–Ω—è–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –∏–∑ user_config.json
    –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    """
    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    default_settings = {
        'currency': 'RUB',
        'language': 'ru',
        'timezone': 'Europe/Moscow',
        'notifications': True,
        'daily_reminder': True,
        'week_start': 'monday'
    }
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ë–î
    user_settings = {}
    for key in default_settings.keys():
        value = get_user_setting(user_id, key)
        if value:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –Ω—É–∂–Ω—ã–µ —Ç–∏–ø—ã
            if key in ['notifications', 'daily_reminder']:
                user_settings[key] = value.lower() == 'true'
            else:
                user_settings[key] = value
        else:
            user_settings[key] = default_settings[key]
    
    return user_settings

def save_user_config(user_id: int, config: dict) -> bool:
    """
    –ó–∞–º–µ–Ω—è–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ user_config.json
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    """
    success = True
    for key, value in config.items():
        if not set_user_setting(user_id, key, str(value)):
            success = False
    
    return success

# ============ –ü–†–ò–ú–ï–† –û–ë–ù–û–í–õ–ï–ù–ù–û–ô –ö–û–ú–ê–ù–î–´ ============

async def start_command(update, context):
    """–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ /start –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î"""
    user_id = update.effective_user.id
    username = update.effective_user.username
    
    # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î
    if not ensure_user_exists(user_id, username):
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_info = get_user_info(user_id)
    if not user_info:
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    config = get_user_config(user_id)
    
    welcome_text = f"""
üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç, {user_info['username'] or '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}!

üìä –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:
‚Ä¢ ID: {user_info['telegram_id']}
‚Ä¢ –í–∞–ª—é—Ç–∞: {config['currency']}
‚Ä¢ –Ø–∑—ã–∫: {config['language']}
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {'–í–∫–ª—é—á–µ–Ω—ã' if config['notifications'] else '–û—Ç–∫–ª—é—á–µ–Ω—ã'}

üí° –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/expenses - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞–º–∏
/budget - –ü–ª–∞–Ω—ã –±—é–¥–∂–µ—Ç–∞
/reminders - –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏
/help - –°–ø—Ä–∞–≤–∫–∞
    """
    
    await update.message.reply_text(welcome_text)

# ============ –ü–†–ò–ú–ï–† –û–ë–ù–û–í–õ–ï–ù–ù–û–ô –ö–û–ú–ê–ù–î–´ –†–ê–°–•–û–î–û–í ============

async def add_expense_command(update, context):
    """–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î"""
    user_id = update.effective_user.id
    
    # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if not ensure_user_exists(user_id):
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    categories = load_user_categories(user_id)
    
    if not categories:
        await update.message.reply_text("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    keyboard = []
    for i in range(0, len(categories), 2):
        row = []
        for j in range(2):
            if i + j < len(categories):
                cat = categories[i + j]
                row.append(InlineKeyboardButton(
                    f"{cat['icon']} {cat['name']}", 
                    callback_data=f"expense_cat_{cat['name']}"
                ))
        keyboard.append(row)
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üí∞ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ä–∞—Å—Ö–æ–¥–∞:",
        reply_markup=reply_markup
    )

async def handle_expense_category(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–∞"""
    query = update.callback_query
    await query.answer()
    
    category_name = query.data.replace("expense_cat_", "")
    user_id = query.from_user.id
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    context.user_data['selected_category'] = category_name
    
    await query.edit_message_text(
        f"üí∞ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}\n"
        f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞:"
    )

# ============ –ö–õ–Æ–ß–ï–í–´–ï –ò–ó–ú–ï–ù–ï–ù–ò–Ø ============

"""
–û–°–ù–û–í–ù–´–ï –ò–ó–ú–ï–ù–ï–ù–ò–Ø –í –ö–û–î–ï:

1. –ò–º–ø–æ—Ä—Ç—ã:
   - –î–æ–±–∞–≤–∏—Ç—å: from database import *
   - –£–±—Ä–∞—Ç—å: import json, os –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏

2. –§—É–Ω–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:
   - get_user_folder_path() ‚Üí get_user_by_telegram_id()
   - create_user_folder() ‚Üí create_user()
   - get_user_folder_info() ‚Üí get_user_info()

3. –§—É–Ω–∫—Ü–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:
   - –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ JSON ‚Üí get_user_categories()
   - –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ JSON ‚Üí add_user_category()

4. –§—É–Ω–∫—Ü–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤:
   - –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ expenses.json ‚Üí get_user_expenses()
   - –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ expenses.json ‚Üí add_expense()

5. –§—É–Ω–∫—Ü–∏–∏ –ø–ª–∞–Ω–æ–≤:
   - –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ budget_plans.json ‚Üí get_user_budget_plans()
   - –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ budget_plans.json ‚Üí create_budget_plan()

6. –§—É–Ω–∫—Ü–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:
   - –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ reminders.json ‚Üí get_user_reminders()
   - –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ reminders.json ‚Üí add_reminder()

7. –§—É–Ω–∫—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫:
   - –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ user_config.json ‚Üí get_user_config()
   - –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ user_config.json ‚Üí save_user_config()

–ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê:
- –ù–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞–ø–æ–∫
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
- –ù–∞–¥–µ–∂–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
- –õ—É—á—à–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
- –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
"""
