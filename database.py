"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö PostgreSQL
–°–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ –∏—Ö –¥–∞–Ω–Ω—ã–º–∏
"""

import os
import psycopg2
from psycopg2.extras import RealDictCursor
import json
from datetime import datetime, date
from typing import Dict, List, Optional, Tuple, Any
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class DatabaseManager:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        self.connection = None
        # –ù–µ –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è —Å—Ä–∞–∑—É, —á—Ç–æ–±—ã –Ω–µ –ø–∞–¥–∞—Ç—å –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
        # self.connect()
    
    def connect(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
            required_vars = ['DATABASE_HOST', 'DATABASE_NAME', 'DATABASE_USER', 'DATABASE_PASSWORD']
            missing_vars = [var for var in required_vars if not os.getenv(var)]
            
            if missing_vars:
                logger.warning(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {missing_vars}")
                logger.warning("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, —Ä–∞–±–æ—Ç–∞–µ–º –≤ —Ä–µ–∂–∏–º–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏")
                return None
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
            self.connection = psycopg2.connect(
                host=os.getenv('DATABASE_HOST'),
                port=os.getenv('DATABASE_PORT', '5432'),
                database=os.getenv('DATABASE_NAME'),
                user=os.getenv('DATABASE_USER'),
                password=os.getenv('DATABASE_PASSWORD'),
                cursor_factory=RealDictCursor
            )
            logger.info("–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
            logger.warning("–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –±–µ–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
            return None
    
    def get_connection(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
        if self.connection is None or self.connection.closed:
            self.connect()
        return self.connection
    
    def is_available(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        return self.get_connection() is not None
    
    def execute_query(self, query: str, params: tuple = None, fetch: bool = False) -> Optional[List[Dict]]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL –∑–∞–ø—Ä–æ—Å–∞"""
        try:
            conn = self.get_connection()
            with conn.cursor() as cursor:
                cursor.execute(query, params)
                if fetch:
                    return cursor.fetchall()
                conn.commit()
                return cursor.rowcount
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {e}")
            conn.rollback()
            raise
    
    def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
        if self.connection:
            self.connection.close()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db_manager = DatabaseManager()

# ============ –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò ============

def get_user_by_telegram_id(telegram_id: int) -> Optional[Dict]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID"""
    if not db_manager.is_available():
        return None
    
    query = """
        SELECT * FROM users 
        WHERE telegram_id = %s AND is_active = TRUE
    """
    result = db_manager.execute_query(query, (telegram_id,), fetch=True)
    return result[0] if result else None

def create_user(telegram_id: int, username: str = None, folder_name: str = None, role: str = "user") -> bool:
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not db_manager.is_available():
        return False
    
    try:
        query = """
            INSERT INTO users (telegram_id, username, folder_name, role)
            VALUES (%s, %s, %s, %s)
            ON CONFLICT (telegram_id) DO UPDATE SET
                username = EXCLUDED.username,
                folder_name = EXCLUDED.folder_name,
                role = EXCLUDED.role,
                is_active = TRUE,
                updated_at = CURRENT_TIMESTAMP
        """
        db_manager.execute_query(query, (telegram_id, username, folder_name, role))
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = get_user_by_telegram_id(telegram_id)
        if user:
            create_default_categories(user['id'])
        
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return False

def get_all_users() -> List[Dict]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    query = "SELECT * FROM users WHERE is_active = TRUE ORDER BY created_at"
    return db_manager.execute_query(query, fetch=True) or []

# ============ –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –ö–ê–¢–ï–ì–û–†–ò–Ø–ú–ò ============

def create_default_categories(user_id: int) -> bool:
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    default_categories = [
        ("–ü—Ä–æ–¥—É–∫—Ç—ã", "expense", "#e74c3c", "üõí"),
        ("–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "expense", "#3498db", "üöó"),
        ("–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", "expense", "#f39c12", "üéÆ"),
        ("–ó–¥–æ—Ä–æ–≤—å–µ", "expense", "#e91e63", "üè•"),
        ("–û–¥–µ–∂–¥–∞", "expense", "#9b59b6", "üëï"),
        ("–î–æ–º", "expense", "#1abc9c", "üè†"),
        ("–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", "expense", "#34495e", "üìö"),
        ("–î—Ä—É–≥–æ–µ", "expense", "#95a5a6", "üì¶"),
        ("–ó–∞—Ä–ø–ª–∞—Ç–∞", "income", "#27ae60", "üí∞"),
        ("–ü–æ–¥—Ä–∞–±–æ—Ç–∫–∞", "income", "#2ecc71", "üíº")
    ]
    
    try:
        query = """
            INSERT INTO user_categories (user_id, category_name, category_type, color, icon)
            VALUES (%s, %s, %s, %s, %s)
            ON CONFLICT (user_id, category_name) DO NOTHING
        """
        for name, cat_type, color, icon in default_categories:
            db_manager.execute_query(query, (user_id, name, cat_type, color, icon))
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")
        return False

def get_user_categories(user_id: int, category_type: str = "expense") -> List[Dict]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    query = """
        SELECT * FROM user_categories 
        WHERE user_id = %s AND category_type = %s
        ORDER BY category_name
    """
    return db_manager.execute_query(query, (user_id, category_type), fetch=True) or []

def add_user_category(user_id: int, category_name: str, category_type: str = "expense", 
                     color: str = "#3498db", icon: str = "üì¶") -> bool:
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    try:
        query = """
            INSERT INTO user_categories (user_id, category_name, category_type, color, icon)
            VALUES (%s, %s, %s, %s, %s)
        """
        db_manager.execute_query(query, (user_id, category_name, category_type, color, icon))
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
        return False

# ============ –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –†–ê–°–•–û–î–ê–ú–ò ============

def add_expense(user_id: int, category_id: int, amount: float, description: str = None, expense_date: date = None) -> bool:
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞"""
    if expense_date is None:
        expense_date = date.today()
    
    try:
        query = """
            INSERT INTO expenses (user_id, category_id, amount, description, date)
            VALUES (%s, %s, %s, %s, %s)
        """
        db_manager.execute_query(query, (user_id, category_id, amount, description, expense_date))
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞: {e}")
        return False

def get_user_expenses(user_id: int, start_date: date = None, end_date: date = None) -> List[Dict]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ –ø–µ—Ä–∏–æ–¥"""
    query = """
        SELECT e.*, uc.category_name, uc.color, uc.icon
        FROM expenses e
        LEFT JOIN user_categories uc ON e.category_id = uc.id
        WHERE e.user_id = %s
    """
    params = [user_id]
    
    if start_date:
        query += " AND e.date >= %s"
        params.append(start_date)
    
    if end_date:
        query += " AND e.date <= %s"
        params.append(end_date)
    
    query += " ORDER BY e.date DESC"
    
    return db_manager.execute_query(query, tuple(params), fetch=True) or []

def get_expenses_by_category(user_id: int, start_date: date = None, end_date: date = None) -> List[Dict]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∑–∞ –ø–µ—Ä–∏–æ–¥"""
    query = """
        SELECT 
            uc.category_name,
            uc.color,
            uc.icon,
            SUM(e.amount) as total_amount,
            COUNT(e.id) as expense_count
        FROM expenses e
        LEFT JOIN user_categories uc ON e.category_id = uc.id
        WHERE e.user_id = %s
    """
    params = [user_id]
    
    if start_date:
        query += " AND e.date >= %s"
        params.append(start_date)
    
    if end_date:
        query += " AND e.date <= %s"
        params.append(end_date)
    
    query += " GROUP BY uc.id, uc.category_name, uc.color, uc.icon ORDER BY total_amount DESC"
    
    return db_manager.execute_query(query, tuple(params), fetch=True) or []

# ============ –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –ü–õ–ê–ù–ê–ú–ò –ë–Æ–î–ñ–ï–¢–ê ============

def create_budget_plan(user_id: int, plan_name: str, total_amount: float, 
                      start_date: date, end_date: date, categories: Dict = None) -> bool:
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ –±—é–¥–∂–µ—Ç–∞"""
    try:
        query = """
            INSERT INTO budget_plans (user_id, plan_name, total_amount, start_date, end_date, categories)
            VALUES (%s, %s, %s, %s, %s, %s)
        """
        categories_json = json.dumps(categories) if categories else None
        db_manager.execute_query(query, (user_id, plan_name, total_amount, start_date, end_date, categories_json))
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∞ –±—é–¥–∂–µ—Ç–∞: {e}")
        return False

def get_user_budget_plans(user_id: int, active_only: bool = True) -> List[Dict]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–ª–∞–Ω–æ–≤ –±—é–¥–∂–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    query = """
        SELECT * FROM budget_plans 
        WHERE user_id = %s
    """
    params = [user_id]
    
    if active_only:
        query += " AND is_active = TRUE"
    
    query += " ORDER BY created_at DESC"
    
    return db_manager.execute_query(query, tuple(params), fetch=True) or []

def update_budget_plan_spent(user_id: int, plan_id: int, spent_amount: float) -> bool:
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω–æ–π —Å—É–º–º—ã –≤ –ø–ª–∞–Ω–µ –±—é–¥–∂–µ—Ç–∞"""
    try:
        query = """
            UPDATE budget_plans 
            SET spent_amount = %s, updated_at = CURRENT_TIMESTAMP
            WHERE id = %s AND user_id = %s
        """
        db_manager.execute_query(query, (spent_amount, plan_id, user_id))
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–ª–∞–Ω–∞ –±—é–¥–∂–µ—Ç–∞: {e}")
        return False

# ============ –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø–ú–ò ============

def add_reminder(user_id: int, title: str, description: str = None, 
                reminder_date: date = None, reminder_time: time = None,
                is_recurring: bool = False, recurring_pattern: str = None) -> bool:
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    if reminder_date is None:
        reminder_date = date.today()
    
    try:
        query = """
            INSERT INTO reminders (user_id, title, description, reminder_date, reminder_time, is_recurring, recurring_pattern)
            VALUES (%s, %s, %s, %s, %s, %s, %s)
        """
        db_manager.execute_query(query, (user_id, title, description, reminder_date, reminder_time, is_recurring, recurring_pattern))
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
        return False

def get_user_reminders(user_id: int, upcoming_only: bool = True) -> List[Dict]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    query = """
        SELECT * FROM reminders 
        WHERE user_id = %s
    """
    params = [user_id]
    
    if upcoming_only:
        query += " AND reminder_date >= CURRENT_DATE AND is_completed = FALSE"
    
    query += " ORDER BY reminder_date, reminder_time"
    
    return db_manager.execute_query(query, tuple(params), fetch=True) or []

# ============ –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –ù–ê–°–¢–†–û–ô–ö–ê–ú–ò ============

def get_user_setting(user_id: int, setting_key: str) -> Optional[str]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    query = """
        SELECT setting_value FROM user_settings 
        WHERE user_id = %s AND setting_key = %s
    """
    result = db_manager.execute_query(query, (user_id, setting_key), fetch=True)
    return result[0]['setting_value'] if result else None

def set_user_setting(user_id: int, setting_key: str, setting_value: str) -> bool:
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        query = """
            INSERT INTO user_settings (user_id, setting_key, setting_value)
            VALUES (%s, %s, %s)
            ON CONFLICT (user_id, setting_key) 
            DO UPDATE SET setting_value = EXCLUDED.setting_value, updated_at = CURRENT_TIMESTAMP
        """
        db_manager.execute_query(query, (user_id, setting_key, setting_value))
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {e}")
        return False

# ============ –§–£–ù–ö–¶–ò–ò –ú–ò–ì–†–ê–¶–ò–ò ============

def migrate_user_data_from_files(user_folder_path: str, telegram_id: int) -> bool:
    """–ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        user = get_user_by_telegram_id(telegram_id)
        if not user:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º username –∏–∑ –ø—É—Ç–∏ –ø–∞–ø–∫–∏
            folder_name = os.path.basename(user_folder_path)
            username = folder_name.split('_')[0] if '_' in folder_name else folder_name
            create_user(telegram_id, username, folder_name)
            user = get_user_by_telegram_id(telegram_id)
        
        if not user:
            return False
        
        user_id = user['id']
        
        # –ú–∏–≥—Ä–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        categories_file = os.path.join(user_folder_path, "user_categories.json")
        if os.path.exists(categories_file):
            with open(categories_file, 'r', encoding='utf-8') as f:
                categories_data = json.load(f)
                for category in categories_data:
                    add_user_category(
                        user_id, 
                        category['name'], 
                        category.get('type', 'expense'),
                        category.get('color', '#3498db'),
                        category.get('icon', 'üì¶')
                    )
        
        # –ú–∏–≥—Ä–∏—Ä—É–µ–º —Ä–∞—Å—Ö–æ–¥—ã
        expenses_file = os.path.join(user_folder_path, "data", "expenses.json")
        if os.path.exists(expenses_file):
            with open(expenses_file, 'r', encoding='utf-8') as f:
                expenses_data = json.load(f)
                for expense in expenses_data:
                    # –ù–∞—Ö–æ–¥–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ –∏–º–µ–Ω–∏
                    category = get_user_categories(user_id)
                    category_id = None
                    for cat in category:
                        if cat['category_name'] == expense.get('category'):
                            category_id = cat['id']
                            break
                    
                    if category_id:
                        expense_date = datetime.strptime(expense['date'], '%Y-%m-%d').date()
                        add_expense(
                            user_id,
                            category_id,
                            expense['amount'],
                            expense.get('description'),
                            expense_date
                        )
        
        # –ú–∏–≥—Ä–∏—Ä—É–µ–º –ø–ª–∞–Ω—ã –±—é–¥–∂–µ—Ç–∞
        budget_plans_file = os.path.join(user_folder_path, "budget_plans.json")
        if os.path.exists(budget_plans_file):
            with open(budget_plans_file, 'r', encoding='utf-8') as f:
                plans_data = json.load(f)
                for plan in plans_data:
                    start_date = datetime.strptime(plan['start_date'], '%Y-%m-%d').date()
                    end_date = datetime.strptime(plan['end_date'], '%Y-%m-%d').date()
                    create_budget_plan(
                        user_id,
                        plan['name'],
                        plan['total_amount'],
                        start_date,
                        end_date,
                        plan.get('categories')
                    )
        
        # –ú–∏–≥—Ä–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        reminders_file = os.path.join(user_folder_path, "reminders.json")
        if os.path.exists(reminders_file):
            with open(reminders_file, 'r', encoding='utf-8') as f:
                reminders_data = json.load(f)
                for reminder in reminders_data:
                    reminder_date = datetime.strptime(reminder['date'], '%Y-%m-%d').date()
                    reminder_time = datetime.strptime(reminder.get('time', '00:00'), '%H:%M').time()
                    add_reminder(
                        user_id,
                        reminder['title'],
                        reminder.get('description'),
                        reminder_date,
                        reminder_time,
                        reminder.get('recurring', False),
                        reminder.get('pattern')
                    )
        
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return False
