import telebot
from telebot import types
import os
import psycopg2
from datetime import datetime, timedelta, date
import matplotlib.pyplot as plt
import io
import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
import numpy as np
import re
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ ---
BOT_TOKEN = os.environ.get('BOT_TOKEN') 
if not BOT_TOKEN:
    print("–û—à–∏–±–∫–∞: –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN.")
    exit()
bot = telebot.TeleBot(BOT_TOKEN)

DATABASE_URL = os.environ.get('DATABASE_URL')
if not DATABASE_URL:
    print("–û—à–∏–±–∫–∞: URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è DATABASE_URL.")
    exit()

# --- –ú–æ–¥–µ–ª—å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ (scikit-learn) ---
vectorizer = TfidfVectorizer()
classifier = LogisticRegression(max_iter=1000)

TRAINING_DATA = [
    ("—Ö–ª–µ–±", "–ï–¥–∞"), ("–º–æ–ª–æ–∫–æ", "–ï–¥–∞"), ("—è–π—Ü–∞", "–ï–¥–∞"), ("—Ñ—Ä—É–∫—Ç—ã", "–ï–¥–∞"),
    ("–æ–≤–æ—â–∏", "–ï–¥–∞"), ("–ø—Ä–æ–¥—É–∫—Ç—ã", "–ï–¥–∞"), ("–æ–±–µ–¥", "–ï–¥–∞"), ("—É–∂–∏–Ω", "–ï–¥–∞"),
    ("–∫–æ—Ñ–µ", "–ï–¥–∞"), ("—Å–æ–∫", "–ï–¥–∞"), ("—á–∞–π", "–ï–¥–∞"), ("–≤–æ–¥–∞", "–ï–¥–∞"),
    ("–±—É–ª–æ—á–∫–∞", "–ï–¥–∞"), ("–ø–∏—Ü—Ü–∞", "–ï–¥–∞"), ("—Ä—ã–±–∞", "–ï–¥–∞"), ("–º—è—Å–æ", "–ï–¥–∞"),
    ("–∫–æ–ª–±–∞—Å–∞", "–ï–¥–∞"), ("—Å—ã—Ä", "–ï–¥–∞"), ("—Ä–∏—Å", "–ï–¥–∞"), ("–∫–∞—Ä—Ç–æ—à–∫–∞", "–ï–¥–∞"),
    ("—Å–ª–∞–¥–æ—Å—Ç–∏", "–ï–¥–∞"), ("–∫–æ–Ω—Ñ–µ—Ç—ã", "–ï–¥–∞"), ("—à–æ–∫–æ–ª–∞–¥", "–ï–¥–∞"), ("–∫–µ—Ñ–∏—Ä", "–ï–¥–∞"),
    ("—Å–º–µ—Ç–∞–Ω–∞", "–ï–¥–∞"), ("–π–æ–≥—É—Ä—Ç", "–ï–¥–∞"), ("—Å–∞–ª–∞—Ç", "–ï–¥–∞"), ("–º–æ—Ä–æ–∂–µ–Ω–æ–µ", "–ï–¥–∞"),
    ("–∑–∞–≤—Ç—Ä–∞–∫", "–ï–¥–∞"), ("–ª–∞–Ω—á", "–ï–¥–∞"),
    
    ("–±–µ–Ω–∑–∏–Ω", "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç"), ("—Ç–∞–∫—Å–∏", "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç"), ("–∞–≤—Ç–æ–±—É—Å", "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç"),
    ("–º–µ—Ç—Ä–æ", "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç"), ("–ø—Ä–æ–µ–∑–¥", "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç"), ("–ø–æ–µ–∑–¥", "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç"),
    ("—Å–∞–º–æ–ª–µ—Ç", "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç"), ("–º–∞—Ä—à—Ä—É—Ç–∫–∞", "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç"), ("–ø—Ä–æ–µ–∑–¥–Ω–æ–π", "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç"),
    ("–∞–≤—Ç–æ", "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç"), ("—Ä–µ–º–æ–Ω—Ç –∞–≤—Ç–æ", "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç"), ("–ø–∞—Ä–∫–æ–≤–∫–∞", "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç"),
    ("—à—Ç—Ä–∞—Ñ", "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç"),
    
    ("–±–∏–ª–µ—Ç—ã", "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è"), ("–∫–∏–Ω–æ", "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è"), ("—Ç–µ–∞—Ç—Ä", "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è"),
    ("–∫–æ–Ω—Ü–µ—Ä—Ç", "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è"), ("–∫–Ω–∏–≥–∞", "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è"), ("–∏–≥—Ä—ã", "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è"),
    ("–∞—Ç—Ç—Ä–∞–∫—Ü–∏–æ–Ω—ã", "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è"), ("–º—É–∑–µ–π", "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è"), ("–ø–æ–¥–ø–∏—Å–∫–∞", "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è"),
    ("–±–∞—Ä", "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è"), ("—Ä–µ—Å—Ç–æ—Ä–∞–Ω", "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è"), ("–∫–∞—Ñ–µ", "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è"),
    ("–≤–µ—á–µ—Ä–∏–Ω–∫–∞", "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è"), ("–ø–æ—Ö–æ–¥", "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è"), ("–æ—Ç–ø—É—Å–∫", "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è"),

    ("–æ–¥–µ–∂–¥–∞", "–û–¥–µ–∂–¥–∞"), ("–æ–±—É–≤—å", "–û–¥–µ–∂–¥–∞"), ("—Ñ—É—Ç–±–æ–ª–∫–∞", "–û–¥–µ–∂–¥–∞"),
    ("–±—Ä—é–∫–∏", "–û–¥–µ–∂–¥–∞"), ("–ø–ª–∞—Ç—å–µ", "–û–¥–µ–∂–¥–∞"), ("–∫—É—Ä—Ç–∫–∞", "–û–¥–µ–∂–¥–∞"),
    ("–∫—Ä–æ—Å—Å–æ–≤–∫–∏", "–û–¥–µ–∂–¥–∞"), ("—Å–≤–∏—Ç–µ—Ä", "–û–¥–µ–∂–¥–∞"), ("–¥–∂–∏–Ω—Å—ã", "–û–¥–µ–∂–¥–∞"),
    ("–ø–∞–ª—å—Ç–æ", "–û–¥–µ–∂–¥–∞"), ("—à–∞–ø–∫–∞", "–û–¥–µ–∂–¥–∞"), ("–ø–µ—Ä—á–∞—Ç–∫–∏", "–û–¥–µ–∂–¥–∞"),

    ("–∫–æ–º–º—É–Ω–∞–ª–∫–∞", "–ñ–∏–ª—å–µ"), ("–∞—Ä–µ–Ω–¥–∞", "–ñ–∏–ª—å–µ"), ("—Å–≤–µ—Ç", "–ñ–∏–ª—å–µ"),
    ("–≤–æ–¥–∞", "–ñ–∏–ª—å–µ"), ("–≥–∞–∑", "–ñ–∏–ª—å–µ"), ("–∫–≤–∏—Ç–∞–Ω—Ü–∏—è", "–ñ–∏–ª—å–µ"), ("–∏–ø–æ—Ç–µ–∫–∞", "–ñ–∏–ª—å–µ"),
    ("–∏–Ω—Ç–µ—Ä–Ω–µ—Ç", "–ñ–∏–ª—å–µ"), ("—Ç–µ–ª–µ—Ñ–æ–Ω", "–ñ–∏–ª—å–µ"),
    
    ("–∞–ø—Ç–µ–∫–∞", "–ó–¥–æ—Ä–æ–≤—å–µ"), ("–≤—Ä–∞—á", "–ó–¥–æ—Ä–æ–≤—å–µ"), ("–ª–µ–∫–∞—Ä—Å—Ç–≤–∞", "–ó–¥–æ—Ä–æ–≤—å–µ"),
    ("—Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥", "–ó–¥–æ—Ä–æ–≤—å–µ"), ("–≤–∏—Ç–∞–º–∏–Ω—ã", "–ó–¥–æ—Ä–æ–≤—å–µ"), ("–±–æ–ª—å–Ω–∏—Ü–∞", "–ó–¥–æ—Ä–æ–≤—å–µ"),
    ("—Å—Ç—Ä–∞—Ö–æ–≤–∫–∞", "–ó–¥–æ—Ä–æ–≤—å–µ"), ("–∫–ª–∏–Ω–∏–∫–∞", "–ó–¥–æ—Ä–æ–≤—å–µ"), ("—Ñ–∏—Ç–Ω–µ—Å", "–ó–¥–æ—Ä–æ–≤—å–µ"),
    ("—Å–ø–æ—Ä—Ç–∑–∞–ª", "–ó–¥–æ—Ä–æ–≤—å–µ"),

    ("—Å–≤—è–∑—å", "–°–≤—è–∑—å"), ("–º–æ–±–∏–ª—å–Ω—ã–π", "–°–≤—è–∑—å"), ("—Ç–∞—Ä–∏—Ñ", "–°–≤—è–∑—å"),

    ("—Å–∫–æ—Ç—á", "–î–æ–º/–ö–∞–Ω—Ü–µ–ª—è—Ä–∏—è"), ("—Ä—É—á–∫–∏", "–î–æ–º/–ö–∞–Ω—Ü–µ–ª—è—Ä–∏—è"), ("–±—É–º–∞–≥–∞", "–î–æ–º/–ö–∞–Ω—Ü–µ–ª—è—Ä–∏—è"),
    ("–∫–∞–Ω—Ü–µ–ª—è—Ä–∏—è", "–î–æ–º/–ö–∞–Ω—Ü–µ–ª—è—Ä–∏—è"), ("–¥–æ–º", "–î–æ–º/–ö–∞–Ω—Ü–µ–ª—è—Ä–∏—è"), ("–ø–æ—Å—É–¥–∞", "–î–æ–º/–ö–∞–Ω—Ü–µ–ª—è—Ä–∏—è"),
    ("—á–∏—Å—Ç—è—â–∏–µ", "–î–æ–º/–ö–∞–Ω—Ü–µ–ª—è—Ä–∏—è"), ("–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã", "–î–æ–º/–ö–∞–Ω—Ü–µ–ª—è—Ä–∏—è"),
    ("—Ç–µ—Ö–Ω–∏–∫–∞", "–î–æ–º/–ö–∞–Ω—Ü–µ–ª—è—Ä–∏—è"), ("–º–µ–±–µ–ª—å", "–î–æ–º/–ö–∞–Ω—Ü–µ–ª—è—Ä–∏—è"), ("–ø–æ—Å—Ç–µ–ª—å–Ω–æ–µ", "–î–æ–º/–ö–∞–Ω—Ü–µ–ª—è—Ä–∏—è"),
    ("–ø–æ–¥–∞—Ä–∫–∏", "–ü—Ä–æ—á–µ–µ"), ("–¥—Ä—É–≥–æ–µ", "–ü—Ä–æ—á–µ–µ"), ("—Ä–∞–∑–Ω–æ–µ", "–ü—Ä–æ—á–µ–µ"), 
    ("–Ω–∞–ª–æ–≥–∏", "–ü—Ä–æ—á–µ–µ"), ("—Å—é—Ä–ø—Ä–∏–∑", "–ü—Ä–æ—á–µ–µ")
]

def train_model(data):
    if not data:
        print("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏. –ú–æ–¥–µ–ª—å –Ω–µ –±—É–¥–µ—Ç –æ–±—É—á–µ–Ω–∞.")
        return
    descriptions = [item[0] for item in data]
    categories = [item[1] for item in data]
    X = vectorizer.fit_transform(descriptions)
    classifier.fit(X, categories)
    print("–ú–æ–¥–µ–ª—å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –æ–±—É—á–µ–Ω–∞.")

def classify_expense(description):
    try:
        if not hasattr(classifier, 'classes_') or len(classifier.classes_) == 0:
            return '–ü—Ä–æ—á–µ–µ'
        description_vectorized = vectorizer.transform([description.lower()])
        prediction = classifier.predict(description_vectorized)[0]
        return prediction
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}. –í–æ–∑–≤—Ä–∞—â–∞—é '–ü—Ä–æ—á–µ–µ'.")
        return '–ü—Ä–æ—á–µ–µ'

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö ---
def get_db_connection():
    try:
        conn = psycopg2.connect(DATABASE_URL)
        return conn
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        return None

def init_db():
    conn = get_db_connection()
    if conn:
        cursor = conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS expenses (
                id SERIAL PRIMARY KEY,
                user_id BIGINT,
                amount REAL,
                currency TEXT,
                description TEXT,
                category TEXT,
                timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );
        ''')
        conn.commit()
        conn.close()
        print("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ (—Ç–∞–±–ª–∏—Ü–∞ 'expenses' –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞/—Å–æ–∑–¥–∞–Ω–∞).")

# --- UI (User Interface) ---
def get_main_menu_keyboard():
    keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    btn_add_expense = types.KeyboardButton('üí∏ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥')
    btn_report = types.KeyboardButton('üìä –û—Ç—á–µ—Ç—ã')
    keyboard.add(btn_add_expense, btn_report)
    return keyboard

def get_report_period_keyboard():
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    btn1 = types.InlineKeyboardButton("–°–µ–≥–æ–¥–Ω—è", callback_data='report_—Å–µ–≥–æ–¥–Ω—è')
    btn2 = types.InlineKeyboardButton("–ù–µ–¥–µ–ª—è", callback_data='report_–Ω–µ–¥–µ–ª—è')
    btn3 = types.InlineKeyboardButton("–ú–µ—Å—è—Ü", callback_data='report_–º–µ—Å—è—Ü')
    btn4 = types.InlineKeyboardButton("–ì–æ–¥", callback_data='report_–≥–æ–¥')
    btn5 = types.InlineKeyboardButton("–î—Ä—É–≥–æ–π –ø–µ—Ä–∏–æ–¥...", callback_data='report_–¥—Ä—É–≥–æ–π')
    keyboard.add(btn1, btn2, btn3, btn4, btn5)
    return keyboard

# --- –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ ---
@bot.message_handler(commands=['start', 'help', 'menu'])
def send_welcome(message):
    bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —É—á–µ—Ç—É —Ä–∞—Å—Ö–æ–¥–æ–≤. –í—ã–±–µ—Ä–∏ –æ–ø—Ü–∏—é –Ω–∏–∂–µ:", reply_markup=get_main_menu_keyboard())

# --- –û—Å–Ω–æ–≤–Ω—ã–µ —Ö—ç–Ω–¥–ª–µ—Ä—ã –¥–ª—è –º–µ–Ω—é ---
@bot.message_handler(regexp='^üí∏ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥$')
def handle_add_expense_menu(message):
    bot.send_message(message.chat.id, "–û—Ç–ª–∏—á–Ω–æ! –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ '–æ–ø–∏—Å–∞–Ω–∏–µ —Å—É–º–º–∞', –Ω–∞–ø—Ä–∏–º–µ—Ä: '—Ö–ª–µ–± 100, –º–æ–ª–æ–∫–æ 500'.", reply_markup=types.ReplyKeyboardRemove())

@bot.message_handler(regexp='^üìä –û—Ç—á–µ—Ç—ã$')
def handle_report_menu(message):
    bot.send_message(message.chat.id, "–ó–∞ –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç—á–µ—Ç?", reply_markup=get_report_period_keyboard())

# --- Callback —Ö—ç–Ω–¥–ª–µ—Ä—ã –¥–ª—è –∫–Ω–æ–ø–æ–∫ ---
@bot.callback_query_handler(func=lambda call: call.data.startswith('report_'))
def handle_report_callback(call):
    chat_id = call.message.chat.id
    user_id = call.from_user.id
    period_text = call.data.replace('report_', '')
    
    # –°—Ä–∞–∑—É —É–¥–∞–ª—è–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞
    bot.edit_message_reply_markup(chat_id, call.message.message_id, reply_markup=None)
    
    if period_text == '–¥—Ä—É–≥–æ–π':
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –ø–µ—Ä–∏–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '—Å 01.01.2024 –ø–æ 31.01.2024').", reply_markup=get_main_menu_keyboard())
        bot.register_next_step_handler(call.message, process_report_period_final)
    else:
        message = call.message
        message.text = period_text
        process_report_period_final(message)

def process_report_period_final(message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    text = message.text.lower()
    
    start_date, end_date = parse_date_period(text)
    # --- –û–¢–õ–ê–î–ö–ê: –≤—ã–≤–æ–¥–∏–º user_id, start_date, end_date, —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è ---
    print(f"[DEBUG] –û—Ç—á–µ—Ç: user_id={user_id}, start_date={start_date}, end_date={end_date}, now={datetime.now()}")
    if not start_date:
        bot.send_message(chat_id, "–ù–µ –º–æ–≥—É —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –ø–µ—Ä–∏–æ–¥.", reply_markup=get_main_menu_keyboard())
        return

    conn = get_db_connection()
    if not conn:
        bot.send_message(chat_id, "–ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.", reply_markup=get_main_menu_keyboard())
        return
    
    try:
        cursor = conn.cursor()
        cursor.execute('''
            SELECT category, SUM(amount)
            FROM expenses
            WHERE user_id = %s AND timestamp BETWEEN %s AND %s
            GROUP BY category
        ''', (user_id, start_date, end_date))
        data = cursor.fetchall()
    except Exception as e:
        bot.send_message(chat_id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}", reply_markup=get_main_menu_keyboard())
        return
    finally:
        if conn: conn.close()

    if not data:
        bot.send_message(chat_id, "–ó–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤.", reply_markup=get_main_menu_keyboard())
        return

    categories = [row[0] for row in data]
    amounts = [row[1] for row in data]
    fig, ax = plt.subplots(figsize=(8, 8))
    ax.pie(amounts, labels=categories, autopct='%1.1f%%', startangle=90, pctdistance=0.85)
    ax.axis('equal')
    report_title_period = text.capitalize()
    if '—Å ' in text.lower() and ' –ø–æ ' in text.lower() and start_date and end_date:
        report_title_period = f"—Å {start_date.strftime('%d.%m.%Y')} –ø–æ {end_date.strftime('%d.%m.%Y')}"
    ax.set_title(f'–û—Ç—á–µ—Ç –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö –∑–∞ {report_title_period.capitalize()} (–¢–≥)')
    buf = io.BytesIO()
    plt.savefig(buf, format='png')
    buf.seek(0)
    plt.close(fig)
    bot.send_photo(chat_id, buf, reply_markup=get_main_menu_keyboard())

def parse_date_period(text):
    text_lower = text.lower()
    start_date = None
    end_date = datetime.now()
    if '—Å–µ–≥–æ–¥–Ω—è' in text_lower:
        start_date = datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)
        end_date = start_date + timedelta(days=1, microseconds=-1)
    elif '–Ω–µ–¥–µ–ª—è' in text_lower:
        start_date = datetime.now() - timedelta(weeks=1)
        start_date = start_date.replace(hour=0, minute=0, second=0, microsecond=0)
        end_date = datetime.now()
    elif '–º–µ—Å—è—Ü' in text_lower:
        start_date = datetime.now().replace(day=1, hour=0, minute=0, second=0, microsecond=0)
        end_date = datetime.now()
    elif '–≥–æ–¥' in text_lower:
        start_date = datetime.now().replace(month=1, day=1, hour=0, minute=0, second=0, microsecond=0)
        end_date = datetime.now()
    elif '—Å ' in text_lower and ' –ø–æ ' in text_lower:
        try:
            date_from_match = re.search(r'—Å\s+(\d{1,2}[.]\d{1,2}(?:[.]\d{2,4})?)', text_lower)
            date_to_match = re.search(r'–ø–æ\s+(\d{1,2}[.]\d{1,2}(?:[.]\d{2,4})?)', text_lower)
            if date_from_match and date_to_match:
                date_from_str = date_from_match.group(1)
                date_to_str = date_to_match.group(1)
                for fmt in ["%d.%m.%Y", "%d.%m.%y", "%d.%m"]:
                    try:
                        start_date = datetime.strptime(date_from_str, fmt)
                        if fmt == "%d.%m": start_date = start_date.replace(year=datetime.now().year)
                        start_date = start_date.replace(hour=0, minute=0, second=0, microsecond=0)
                        break
                    except ValueError: pass
                for fmt in ["%d.%m.%Y", "%d.%m.%y", "%d.%m"]:
                    try:
                        end_date = datetime.strptime(date_to_str, fmt)
                        if fmt == "%d.%m": end_date = end_date.replace(year=datetime.now().year)
                        end_date = end_date.replace(hour=23, minute=59, second=59, microsecond=999999)
                        break
                    except ValueError: pass
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç: {e}")
            start_date = None
    else:
        try:
            month_map = {
                '—è–Ω–≤–∞—Ä—å': 1, '—Ñ–µ–≤—Ä–∞–ª—å': 2, '–º–∞—Ä—Ç': 3, '–∞–ø—Ä–µ–ª—å': 4, '–º–∞–π': 5, '–∏—é–Ω—å': 6,
                '–∏—é–ª—å': 7, '–∞–≤–≥—É—Å—Ç': 8, '—Å–µ–Ω—Ç—è–±—Ä—å': 9, '–æ–∫—Ç—è–±—Ä—å': 10, '–Ω–æ—è–±—Ä—å': 11, '–¥–µ–∫–∞–±—Ä—å': 12
            }
            month_year_match = re.search(r'([–∞-—è—ë]+)\s*(\d{4})', text_lower)
            if month_year_match:
                month_name = month_year_match.group(1)
                year = int(month_year_match.group(2))
                month_num = month_map.get(month_name)
                if month_num:
                    start_date = datetime(year, month_num, 1, 0, 0, 0, 0)
                    if month_num == 12: end_date = datetime(year + 1, 1, 1, 0, 0, 0, 0) - timedelta(microseconds=1)
                    else: end_date = datetime(year, month_num + 1, 1, 0, 0, 0, 0) - timedelta(microseconds=1)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ '–º–µ—Å—è—Ü –≥–æ–¥': {e}")
            pass
    return start_date, end_date


# --- –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤) ---
@bot.message_handler(func=lambda message: True, content_types=['text'])
def handle_text_messages(message):
    user_id = message.from_user.id
    
    if message.text in ['üí∏ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥', 'üìä –û—Ç—á–µ—Ç—ã']:
        return

    text = message.text
    pattern = r'([\w\s]+)\s+([\d\s.,]+)(?:—Ç–≥)?'
    matches = re.findall(pattern, text, re.IGNORECASE)
    
    if not matches:
        bot.send_message(message.chat.id, "–ù–µ –º–æ–≥—É —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–∞—Å—Ö–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç '–æ–ø–∏—Å–∞–Ω–∏–µ —Å—É–º–º–∞', –Ω–∞–ø—Ä–∏–º–µ—Ä: '—Ö–ª–µ–± 100, –º–æ–ª–æ–∫–æ 500'.", reply_markup=get_main_menu_keyboard())
        return
    
    conn = get_db_connection()
    if not conn:
        bot.send_message(message.chat.id, "–ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.", reply_markup=get_main_menu_keyboard())
        return

    try:
        success_count = 0
        for match in matches:
            description = match[0].strip()
            amount_str = match[1].strip().replace(' ', '').replace(',', '.')
            
            try:
                amount = float(amount_str)
                currency = '—Ç–≥'
                category = classify_expense(description)
                
                # --- –û–¢–õ–ê–î–ö–ê: –≤—ã–≤–æ–¥–∏–º user_id, description, amount, —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è ---
                print(f"[DEBUG] –î–æ–±–∞–≤–ª—è—é —Ä–∞—Å—Ö–æ–¥: user_id={user_id}, description='{description}', amount={amount}, category='{category}', timestamp={datetime.now()}")
                
                cursor = conn.cursor()
                cursor.execute(
                    "INSERT INTO expenses (user_id, amount, currency, description, category) VALUES (%s, %s, %s, %s, %s)",
                    (user_id, amount, currency, description, category)
                )
                success_count += 1
            except ValueError:
                bot.send_message(message.chat.id, f"–ù–µ –º–æ–≥—É —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å—É–º–º—É –¥–ª—è '{description}'. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç.", reply_markup=get_main_menu_keyboard())
                conn.rollback()
                return

        conn.commit()
        if success_count > 0:
            bot.send_message(message.chat.id, f"‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ {success_count} —Ä–∞—Å—Ö–æ–¥–æ–≤.", reply_markup=get_main_menu_keyboard())
    except Exception as e:
        conn.rollback()
        bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–∞—Å—Ö–æ–¥–∞: {e}", reply_markup=get_main_menu_keyboard())
    finally:
        conn.close()


# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
if __name__ == '__main__':
    train_model(TRAINING_DATA)
    init_db()
    
    commands = [
        telebot.types.BotCommand("/start", "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        telebot.types.BotCommand("/menu", "–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        telebot.types.BotCommand("/report", "–ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö"),
    ]
    bot.set_my_commands(commands)
    
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è...")
    bot.polling(none_stop=True)