import os
import logging
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters
import psycopg2
from datetime import datetime, timedelta, timezone
import matplotlib.pyplot as plt
import io # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –≤ –ø–∞–º—è—Ç–∏
from telegram.ext import ConversationHandler
import re

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏) ---
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ Railway ---
# –ò—Å–ø–æ–ª—å–∑—É–µ–º BOT_TOKEN, –∫–∞–∫ —ç—Ç–æ —É–∫–∞–∑–∞–Ω–æ –≤ –≤–∞—à–∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö Railway
BOT_TOKEN = os.getenv("BOT_TOKEN")
DATABASE_URL = os.getenv("DATABASE_URL")
# ADMIN_USER_ID - –µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω—É
ADMIN_USER_ID = os.getenv("ADMIN_USER_ID") 
if ADMIN_USER_ID:
    try:
        ADMIN_USER_ID = int(ADMIN_USER_ID)
    except ValueError:
        logger.warning("ADMIN_USER_ID is not a valid integer. It will be ignored.")
        ADMIN_USER_ID = None

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö ---

def get_db_connection():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö PostgreSQL."""
    if not DATABASE_URL:
        logger.error("DATABASE_URL environment variable is not set.")
        raise ValueError("DATABASE_URL is not set. Cannot connect to database.")
    return psycopg2.connect(DATABASE_URL)

def create_table_if_not_exists():
    """
    –°–æ–∑–¥–∞—ë—Ç —Ç–∞–±–ª–∏—Ü—É expenses, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å –Ω—É–∂–Ω—ã–º–∏ –ø–æ–ª—è–º–∏.
    """
    conn = None
    try:
        conn = get_db_connection()
        cur = conn.cursor()
        cur.execute('''
            CREATE TABLE IF NOT EXISTS expenses (
                id SERIAL PRIMARY KEY,
                amount NUMERIC(10, 2) NOT NULL,
                description TEXT,
                category VARCHAR(100) NOT NULL,
                transaction_date TIMESTAMP WITH TIME ZONE NOT NULL
            );
        ''')
        conn.commit()
        logger.info("–¢–∞–±–ª–∏—Ü–∞ 'expenses' –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞/—Å–æ–∑–¥–∞–Ω–∞.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã: {e}")
        if conn:
            conn.rollback()
    finally:
        if conn:
            conn.close()

# --- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞ ---
def add_expense(amount, category, description, transaction_date):
    conn = None
    try:
        conn = get_db_connection()
        cur = conn.cursor()
        cur.execute(
            """
            INSERT INTO expenses (amount, description, category, transaction_date)
            VALUES (%s, %s, %s, %s);
            """,
            (amount, description, category, transaction_date)
        )
        conn.commit()
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å: {amount} {category} {description} {transaction_date}")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–∞—Å—Ö–æ–¥–∞: {e}")
        if conn:
            conn.rollback()
        return False
    finally:
        if conn:
            conn.close()

# --- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–±–æ—Ä–∫–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ –¥–ª—è –æ—Ç—á—ë—Ç–∞ ---
def get_expenses_for_report(start_date: datetime, end_date: datetime):
    conn = None
    expenses = []
    try:
        conn = get_db_connection()
        cur = conn.cursor()
        cur.execute(
            """
            SELECT amount, category, description, transaction_date
            FROM expenses
            WHERE transaction_date BETWEEN %s AND %s
            ORDER BY transaction_date;
            """,
            (start_date, end_date)
        )
        expenses = cur.fetchall()
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(expenses)} –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ—Ç—á—ë—Ç–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥ {start_date} - {end_date}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ –¥–ª—è –æ—Ç—á—ë—Ç–∞: {e}")
    finally:
        if conn:
            conn.close()
    return expenses

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è Telegram –±–æ—Ç–∞ ---

async def start(update: Update, context) -> None:
    """–û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start."""
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É—á–µ—Ç–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤. –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ä–∞—Å—Ö–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: '–°—É–º–º–∞ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –û–ø–∏—Å–∞–Ω–∏–µ'\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: '150 –ï–¥–∞ –û–±–µ–¥ –≤ –∫–∞—Ñ–µ'\n"
        "–î–ª—è –æ—Ç—á–µ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /report."
    )

# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
def get_main_menu_keyboard():
    keyboard = [
        [KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥"), KeyboardButton("üìä –û—Ç—á–µ—Ç—ã")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –æ—Ç—á–µ—Ç–∞ ---
def get_report_period_keyboard():
    keyboard = [
        [KeyboardButton("–°–µ–≥–æ–¥–Ω—è"), KeyboardButton("–ù–µ–¥–µ–ª—è")],
        [KeyboardButton("–ú–µ—Å—è—Ü"), KeyboardButton("–ì–æ–¥")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)

# --- –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "üìä –û—Ç—á–µ—Ç—ã" ---
async def menu(update: Update, context) -> None:
    await update.message.reply_text(
        "–ó–∞ –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç—á–µ—Ç?",
        reply_markup=get_report_period_keyboard()
    )

# --- –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ ---
PERIOD = 1
async def period_choice(update: Update, context) -> int:
    logger.info(f"–í—ã–±—Ä–∞–Ω –ø–µ—Ä–∏–æ–¥: {update.message.text}")
    text = update.message.text.lower()
    today = datetime.now(timezone.utc)
    if text in ["—Å–µ–≥–æ–¥–Ω—è", "—Å–µ–≥–æ–¥–Ω—è"]:
        start = today.replace(hour=0, minute=0, second=0, microsecond=0)
        end = today.replace(hour=23, minute=59, second=59, microsecond=999999)
    elif text in ["–Ω–µ–¥–µ–ª—è", "–Ω–µ–¥–µ–ª—è"]:
        start = (today - timedelta(days=6)).replace(hour=0, minute=0, second=0, microsecond=0)
        end = today.replace(hour=23, minute=59, second=59, microsecond=999999)
    elif text in ["–º–µ—Å—è—Ü", "–º–µ—Å—è—Ü"]:
        start = today.replace(day=1, hour=0, minute=0, second=0, microsecond=0)
        end = today.replace(hour=23, minute=59, second=59, microsecond=999999)
    elif text in ["–≥–æ–¥", "–≥–æ–¥"]:
        start = today.replace(month=1, day=1, hour=0, minute=0, second=0, microsecond=0)
        end = today.replace(hour=23, minute=59, second=59, microsecond=999999)
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.", reply_markup=get_report_period_keyboard())
        return PERIOD
    await send_report(update, context, start, end)
    # –ü–æ—Å–ª–µ –æ—Ç—á–µ—Ç–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu_keyboard())
    return ConversationHandler.END

# --- –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥ ---
async def send_report(update, context, start, end):
    try:
        expenses_data = get_expenses_for_report(start, end)
        if not expenses_data:
            await update.message.reply_text("–ó–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ —Ä–∞—Å—Ö–æ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return
        total_amount = sum(float(e[0]) for e in expenses_data)
        report_text = f"üìä *–û—Ç—á—ë—Ç –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö –∑–∞ –ø–µ—Ä–∏–æ–¥*\n\n"
        category_sums = {}
        for amount, category, _, _ in expenses_data:
            category_sums[category] = category_sums.get(category, 0) + float(amount)
        for category, amount in sorted(category_sums.items(), key=lambda item: item[1], reverse=True):
            report_text += f"*{category}:* {amount:.2f}\n"
        report_text += f"\n*–ò—Ç–æ–≥–æ —Ä–∞—Å—Ö–æ–¥–æ–≤: {total_amount:.2f}*"
        chart_buffer = generate_expense_chart(expenses_data, f"–†–∞—Å—Ö–æ–¥—ã –∑–∞ –ø–µ—Ä–∏–æ–¥")
        if chart_buffer:
            await update.message.reply_photo(photo=chart_buffer, caption=report_text, parse_mode='Markdown')
        else:
            await update.message.reply_text(report_text, parse_mode='Markdown')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞: {e}")
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞: {e}")

# --- ConversationHandler –¥–ª—è –º–µ–Ω—é –æ—Ç—á–µ—Ç–æ–≤ ---
report_conv_handler = ConversationHandler(
    entry_points=[MessageHandler(filters.Regex("^üìä –û—Ç—á–µ—Ç—ã$"), menu)],
    states={
        PERIOD: [MessageHandler(filters.Regex("^(–°–µ–≥–æ–¥–Ω—è|–ù–µ–¥–µ–ª—è|–ú–µ—Å—è—Ü|–ì–æ–¥)$", flags=re.IGNORECASE), period_choice)],
    },
    fallbacks=[],
    allow_reentry=True
)

async def handle_message(update: Update, context) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤.
    –¢–µ–ø–µ—Ä—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç: '–û–ø–∏—Å–∞–Ω–∏–µ —Å—É–º–º–∞' (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–•–ª–µ–± 130').
    –ò–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è-–∫–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∏ –º–µ–Ω—é –æ—Ç—á–µ—Ç–æ–≤.
    """
    text = update.message.text.strip()
    # –ù–µ —Ä–µ–∞–≥–∏—Ä—É–µ–º –Ω–∞ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏ –ø–µ—Ä–∏–æ–¥–∞
    if text in ["–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥", "üìä –û—Ç—á–µ—Ç—ã", "–°–µ–≥–æ–¥–Ω—è", "–ù–µ–¥–µ–ª—è", "–ú–µ—Å—è—Ü", "–ì–æ–¥"]:
        return
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {update.message.from_user.id}: {text}")
    import re
    match = re.match(r"(.+?)\s+(\d+[.,]?\d*)$", text)
    if not match:
        await update.message.reply_text(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: '–û–ø–∏—Å–∞–Ω–∏–µ —Å—É–º–º–∞' (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–•–ª–µ–± 130').",
            reply_markup=get_main_menu_keyboard()
        )
        return
    description = match.group(1).strip()
    amount_str = match.group(2).replace(',', '.')
    try:
        amount = float(amount_str)
        category = "–ü—Ä–æ—á–µ–µ"
        transaction_date = datetime.now(timezone.utc)
        if add_expense(amount, category, description, transaction_date):
            await update.message.reply_text(
                f"–†–∞—Å—Ö–æ–¥ {amount:.2f} ({description}) –∑–∞–ø–∏—Å–∞–Ω!",
                reply_markup=get_main_menu_keyboard()
            )
        else:
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —Ä–∞—Å—Ö–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.",
                reply_markup=get_main_menu_keyboard()
            )
    except ValueError:
        await update.message.reply_text(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 150.50).",
            reply_markup=get_main_menu_keyboard()
        )
    except Exception as e:
        logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", reply_markup=get_main_menu_keyboard())

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤ –∏ –¥–∏–∞–≥—Ä–∞–º–º ---

def generate_expense_chart(expenses_data, title="–†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"):
    category_sums = {}
    for amount, category, _, _ in expenses_data:
        category_sums[category] = category_sums.get(category, 0) + float(amount)
    if not category_sums:
        return None
    labels = list(category_sums.keys())
    sizes = list(category_sums.values())
    colors = plt.cm.Paired.colors
    fig1, ax1 = plt.subplots(figsize=(8, 8))
    ax1.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=90, colors=colors,
            wedgeprops={'edgecolor': 'black', 'linewidth': 0.5, 'antialiased': True},
            textprops={'fontsize': 10, 'color': 'black', 'weight': 'bold'})
    ax1.axis('equal')
    plt.title(title, fontsize=16, pad=20, weight='bold')
    plt.tight_layout()
    buf = io.BytesIO()
    plt.savefig(buf, format='png', bbox_inches='tight', dpi=150)
    buf.seek(0)
    plt.close(fig1)
    return buf

async def report(update: Update, context) -> None:
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /report –æ—Ç {update.message.from_user.id}")
    await update.message.reply_text("–§–æ—Ä–º–∏—Ä—É—é –æ—Ç—á—ë—Ç –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü...")
    today = datetime.now(timezone.utc)
    start_of_month = datetime(today.year, today.month, 1, 0, 0, 0, tzinfo=timezone.utc)
    end_of_day = datetime(today.year, today.month, today.day, 23, 59, 59, tzinfo=timezone.utc)
    try:
        expenses_data = get_expenses_for_report(start_of_month, end_of_day)
        if not expenses_data:
            await update.message.reply_text("–ó–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü —Ä–∞—Å—Ö–æ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return
        total_amount = sum(float(e[0]) for e in expenses_data)
        report_text = f"üìä *–û—Ç—á—ë—Ç –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö –∑–∞ {start_of_month.strftime('%B %Y')}*\n\n"
        category_sums = {}
        for amount, category, _, _ in expenses_data:
            category_sums[category] = category_sums.get(category, 0) + float(amount)
        for category, amount in sorted(category_sums.items(), key=lambda item: item[1], reverse=True):
            report_text += f"*{category}:* {amount:.2f}\n"
        report_text += f"\n*–ò—Ç–æ–≥–æ —Ä–∞—Å—Ö–æ–¥–æ–≤: {total_amount:.2f}*"
        chart_buffer = generate_expense_chart(expenses_data, f"–†–∞—Å—Ö–æ–¥—ã –∑–∞ {start_of_month.strftime('%B %Y')}")
        if chart_buffer:
            await update.message.reply_photo(photo=chart_buffer, caption=report_text, parse_mode='Markdown')
        else:
            await update.message.reply_text(report_text, parse_mode='Markdown')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞: {e}")
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞: {e}")

# --- –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ ---

def main():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    if not BOT_TOKEN:
        logger.error("BOT_TOKEN environment variable is not set. Bot cannot start.")
        raise ValueError("BOT_TOKEN is not set.")

    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞/–æ–±–Ω–æ–≤–ª–µ–Ω–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –±–æ—Ç–∞
    # create_table_if_not_exists() –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∑–¥–µ—Å—å –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î
    # –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: —Ñ—É–Ω–∫—Ü–∏—è create_table_if_not_exists() –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ–π
    # –∏–ª–∏ –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –¥–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Application.
    # –í —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –æ–Ω–∞ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –¥–æ run_polling, —á—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ.
    create_table_if_not_exists() 

    application = Application.builder().token(BOT_TOKEN).build() # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ BOT_TOKEN

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("report", report))
    application.add_handler(report_conv_handler)  # ConversationHandler –¥–æ–ª–∂–µ–Ω –∏–¥—Ç–∏ –î–û –æ–±—ã—á–Ω–æ–≥–æ MessageHandler
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling()

if __name__ == "__main__":
    main()