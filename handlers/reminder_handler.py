"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
"""
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ContextTypes
from decimal import Decimal
from datetime import date
from typing import Optional, List
from handlers.base_handler import BaseHandler
from services.reminder_service import reminder_service
from models.reminder import Reminder
from utils import logger, ValidationError, DatabaseError
from utils.validators import Validator

class ReminderHandler(BaseHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    
    async def handle(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        if not await self.check_user_access(update, context):
            return
        
        try:
            text = update.message.text.strip()
            user_id = update.effective_user.id
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
            if text == "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è":
                await self._show_reminders_menu(update, context, user_id)
            elif text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ":
                await self._start_reminder_creation(update, context, user_id)
            elif text == "üìã –°–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π":
                await self._show_reminders_list(update, context, user_id)
            elif text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ":
                await self._start_reminder_editing(update, context, user_id)
            elif text == "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ":
                await self._start_reminder_deletion(update, context, user_id)
            else:
                await update.message.reply_text(
                    "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞",
                    reply_markup=self.get_main_menu_keyboard()
                )
                
        except Exception as e:
            await self.handle_error(update, context, e)
    
    async def _show_reminders_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
        """–ü–æ–∫–∞–∑ –º–µ–Ω—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            reminders = await reminder_service.get_user_reminders(user_id, active_only=True, limit=5)
            
            if not reminders:
                keyboard = [
                    [KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")],
                    [KeyboardButton("üîô –ù–∞–∑–∞–¥")]
                ]
                message = "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π."
            else:
                keyboard = [
                    [KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"), KeyboardButton("üìã –°–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")],
                    [KeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"), KeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")],
                    [KeyboardButton("üîô –ù–∞–∑–∞–¥")]
                ]
                
                message = "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n\n"
                message += "üìã –í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n"
                for reminder in reminders[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                    message += f"‚Ä¢ {reminder.title}: {self.format_amount(float(reminder.amount))}\n"
                    message += f"  üìÖ {self.format_date(reminder.start_date)}\n"
                
                if len(reminders) > 3:
                    message += f"... –∏ –µ—â–µ {len(reminders) - 3} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"
            
            await update.message.reply_text(
                message,
                reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            )
            
        except Exception as e:
            await self.handle_error(update, context, e)
    
    async def _start_reminder_creation(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
        """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
        try:
            context.user_data['reminder_user_id'] = user_id
            context.user_data['reminder_step'] = 'title'
            
            await update.message.reply_text(
                "‚è∞ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:",
                reply_markup=self.get_back_keyboard()
            )
            
        except Exception as e:
            await self.handle_error(update, context, e)
    
    async def _process_reminder_title(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è"""
        try:
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
            title = Validator.validate_length(text, 1, 100, "–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            context.user_data['reminder_title'] = title
            context.user_data['reminder_step'] = 'description'
            
            await update.message.reply_text(
                f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {title}\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–∏–ª–∏ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):",
                reply_markup=self.get_back_keyboard()
            )
            
        except ValidationError as e:
            await update.message.reply_text(
                f"‚ùå {e.message}",
                reply_markup=self.get_back_keyboard()
            )
        except Exception as e:
            await self.handle_error(update, context, e)
    
    async def _process_reminder_description(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è"""
        try:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–æ–ø—É—Å–∫ –æ–ø–∏—Å–∞–Ω–∏—è
            if text.lower() in ['–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å', 'skip', '']:
                description = None
            else:
                description = Validator.validate_length(text, 1, 500, "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            context.user_data['reminder_description'] = description
            context.user_data['reminder_step'] = 'amount'
            
            await update.message.reply_text(
                f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {description or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n"
                "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:",
                reply_markup=self.get_back_keyboard()
            )
            
        except ValidationError as e:
            await update.message.reply_text(
                f"‚ùå {e.message}",
                reply_markup=self.get_back_keyboard()
            )
        except Exception as e:
            await self.handle_error(update, context, e)
    
    async def _process_reminder_amount(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã"""
        try:
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Å—É–º–º—É
            amount = Validator.validate_amount(text)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            context.user_data['reminder_amount'] = amount
            context.user_data['reminder_step'] = 'start_date'
            
            await update.message.reply_text(
                f"üí∞ –°—É–º–º–∞: {self.format_amount(float(amount))}\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15.09.2025):",
                reply_markup=self.get_back_keyboard()
            )
            
        except ValidationError as e:
            await update.message.reply_text(
                f"‚ùå {e.message}",
                reply_markup=self.get_back_keyboard()
            )
        except Exception as e:
            await self.handle_error(update, context, e)
    
    async def _process_reminder_start_date(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞"""
        try:
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞—Ç—É
            start_date = Validator.validate_date(text)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            context.user_data['reminder_start_date'] = start_date
            context.user_data['reminder_step'] = 'end_date'
            
            await update.message.reply_text(
                f"üìÖ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {self.format_date(start_date)}\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–∏–ª–∏ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å' –¥–ª—è –±–µ—Å—Å—Ä–æ—á–Ω–æ–≥–æ):",
                reply_markup=self.get_back_keyboard()
            )
            
        except ValidationError as e:
            await update.message.reply_text(
                f"‚ùå {e.message}",
                reply_markup=self.get_back_keyboard()
            )
        except Exception as e:
            await self.handle_error(update, context, e)
    
    async def _process_reminder_end_date(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è"""
        try:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–æ–ø—É—Å–∫ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è
            if text.lower() in ['–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å', 'skip', '']:
                end_date = None
            else:
                end_date = Validator.validate_date(text)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –Ω–µ —Ä–∞–Ω—å—à–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞
                start_date = context.user_data['reminder_start_date']
                if end_date < start_date:
                    raise ValidationError("–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞")
            
            # –°–æ–∑–¥–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            await self._complete_reminder_creation(update, context, end_date)
            
        except ValidationError as e:
            await update.message.reply_text(
                f"‚ùå {e.message}",
                reply_markup=self.get_back_keyboard()
            )
        except Exception as e:
            await self.handle_error(update, context, e)
    
    async def _complete_reminder_creation(self, update: Update, context: ContextTypes.DEFAULT_TYPE, end_date: Optional[date]):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
        try:
            user_id = context.user_data['reminder_user_id']
            title = context.user_data['reminder_title']
            description = context.user_data.get('reminder_description')
            amount = context.user_data['reminder_amount']
            start_date = context.user_data['reminder_start_date']
            
            # –°–æ–∑–¥–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            reminder = await reminder_service.create_reminder(
                user_id=user_id,
                title=title,
                description=description,
                amount=amount,
                start_date=start_date,
                end_date=end_date
            )
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            response = f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!\n\n"
            response += f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {title}\n"
            response += f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {description or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            response += f"üí∞ –°—É–º–º–∞: {self.format_amount(float(amount))}\n"
            response += f"üìÖ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {self.format_date(start_date)}\n"
            response += f"üìÖ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {self.format_date(end_date) if end_date else '–ë–µ—Å—Å—Ä–æ—á–Ω–æ'}\n"
            
            await update.message.reply_text(
                response,
                reply_markup=self.get_main_menu_keyboard()
            )
            
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            self._clear_reminder_data(context)
            
        except Exception as e:
            await self.handle_error(update, context, e)
    
    async def _show_reminders_list(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
        """–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        try:
            reminders = await reminder_service.get_user_reminders(user_id, active_only=True)
            
            if not reminders:
                await update.message.reply_text(
                    "üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.",
                    reply_markup=self.get_back_keyboard()
                )
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫
            response = "üìã –í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n\n"
            
            for i, reminder in enumerate(reminders, 1):
                response += f"{i}. {reminder.title}\n"
                response += f"   üí∞ {self.format_amount(float(reminder.amount))}\n"
                response += f"   üìÖ {self.format_date(reminder.start_date)}"
                if reminder.end_date:
                    response += f" - {self.format_date(reminder.end_date)}"
                response += "\n\n"
            
            keyboard = [
                [KeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"), KeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")],
                [KeyboardButton("üîô –ù–∞–∑–∞–¥")]
            ]
            
            await update.message.reply_text(
                response,
                reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            )
            
        except Exception as e:
            await self.handle_error(update, context, e)
    
    def _clear_reminder_data(self, context: ContextTypes.DEFAULT_TYPE):
        """–û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
        keys_to_remove = [
            'reminder_user_id', 'reminder_step', 'reminder_title', 
            'reminder_description', 'reminder_amount', 'reminder_start_date'
        ]
        for key in keys_to_remove:
            context.user_data.pop(key, None)
