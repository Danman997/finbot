"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –±—é–¥–∂–µ—Ç–∞
"""
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ContextTypes
from decimal import Decimal
from datetime import date
from typing import Optional, List
from handlers.base_handler import BaseHandler
from services.budget_service import budget_service
from models.budget_plan import BudgetPlan, BudgetPlanItem
from utils import logger, ValidationError, DatabaseError
from utils.validators import Validator

class BudgetHandler(BaseHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –±—é–¥–∂–µ—Ç–∞"""
    
    async def handle(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        if not await self.check_user_access(update, context):
            return
        
        try:
            text = update.message.text.strip()
            user_id = update.effective_user.id
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
            if text == "üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ":
                await self._show_planning_menu(update, context, user_id)
            elif text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ":
                await self._start_planning(update, context, user_id)
            elif text == "üìã –°–ø–∏—Å–æ–∫ –ø–ª–∞–Ω–æ–≤":
                await self._show_plans_list(update, context, user_id)
            elif text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω":
                await self._start_plan_editing(update, context, user_id)
            elif text == "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø–ª–∞–Ω":
                await self._start_plan_deletion(update, context, user_id)
            else:
                await update.message.reply_text(
                    "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞",
                    reply_markup=self.get_main_menu_keyboard()
                )
                
        except Exception as e:
            await self.handle_error(update, context, e)
    
    async def _show_planning_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
        """–ü–æ–∫–∞–∑ –º–µ–Ω—é –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            plans = await budget_service.get_user_budget_plans(user_id, limit=5)
            
            if not plans:
                keyboard = [
                    [KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ")],
                    [KeyboardButton("üîô –ù–∞–∑–∞–¥")]
                ]
                message = "üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞\n\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–ª–∞–Ω–æ–≤ –±—é–¥–∂–µ—Ç–∞."
            else:
                keyboard = [
                    [KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"), KeyboardButton("üìã –°–ø–∏—Å–æ–∫ –ø–ª–∞–Ω–æ–≤")],
                    [KeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω"), KeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø–ª–∞–Ω")],
                    [KeyboardButton("üîô –ù–∞–∑–∞–¥")]
                ]
                
                message = "üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞\n\n"
                message += "üìã –í–∞—à–∏ –ø–ª–∞–Ω—ã:\n"
                for plan in plans[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –ø–ª–∞–Ω–∞
                    message += f"‚Ä¢ {self.format_month_year(plan.plan_month)}: {self.format_amount(float(plan.total_amount))}\n"
                
                if len(plans) > 3:
                    message += f"... –∏ –µ—â–µ {len(plans) - 3} –ø–ª–∞–Ω–æ–≤"
            
            await update.message.reply_text(
                message,
                reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            )
            
        except Exception as e:
            await self.handle_error(update, context, e)
    
    async def _start_planning(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
        """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∞"""
        try:
            context.user_data['planning_user_id'] = user_id
            context.user_data['planning_step'] = 'month'
            
            await update.message.reply_text(
                "üìÖ –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ –±—é–¥–∂–µ—Ç–∞\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—è—Ü –∏ –≥–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 09.2025):",
                reply_markup=self.get_back_keyboard()
            )
            
        except Exception as e:
            await self.handle_error(update, context, e)
    
    async def _process_planning_month(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –º–µ—Å—è—Ü–∞"""
        try:
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –º–µ—Å—è—Ü
            month, year = Validator.validate_month_year(text)
            plan_date = date(year, month, 1)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –ø–ª–∞–Ω–∞ –Ω–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü
            existing_plan = await budget_service.get_budget_plan_by_month(
                context.user_data['planning_user_id'], month, year
            )
            
            if existing_plan:
                await update.message.reply_text(
                    f"‚ùå –ü–ª–∞–Ω –Ω–∞ {text} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.\n"
                    f"–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –º–µ—Å—è—Ü –∏–ª–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–ª–∞–Ω.",
                    reply_markup=self.get_back_keyboard()
                )
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            context.user_data['planning_month'] = plan_date
            context.user_data['planning_step'] = 'total'
            
            await update.message.reply_text(
                f"üìÖ –ú–µ—Å—è—Ü: {text}\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –æ–±—â—É—é —Å—É–º–º—É –ø–ª–∞–Ω–∞:",
                reply_markup=self.get_back_keyboard()
            )
            
        except ValidationError as e:
            await update.message.reply_text(
                f"‚ùå {e.message}",
                reply_markup=self.get_back_keyboard()
            )
        except Exception as e:
            await self.handle_error(update, context, e)
    
    async def _process_planning_total(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ–±—â–µ–π —Å—É–º–º—ã"""
        try:
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Å—É–º–º—É
            total_amount = Validator.validate_amount(text)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            context.user_data['planning_total'] = total_amount
            context.user_data['planning_step'] = 'categories'
            context.user_data['planning_items'] = []
            
            await update.message.reply_text(
                f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞: {self.format_amount(float(total_amount))}\n\n"
                "–¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤—å—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
                reply_markup=self.get_back_keyboard()
            )
            
        except ValidationError as e:
            await update.message.reply_text(
                f"‚ùå {e.message}",
                reply_markup=self.get_back_keyboard()
            )
        except Exception as e:
            await self.handle_error(update, context, e)
    
    async def _process_planning_category(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        try:
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            category = Validator.validate_category(text)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            context.user_data['current_category'] = category
            context.user_data['planning_step'] = 'amount'
            
            await update.message.reply_text(
                f"üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n\n"
                "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
                reply_markup=self.get_back_keyboard()
            )
            
        except ValidationError as e:
            await update.message.reply_text(
                f"‚ùå {e.message}",
                reply_markup=self.get_back_keyboard()
            )
        except Exception as e:
            await self.handle_error(update, context, e)
    
    async def _process_planning_amount(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        try:
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Å—É–º–º—É
            amount = Validator.validate_amount(text)
            
            # –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –ø–ª–∞–Ω–∞
            item = BudgetPlanItem(
                category=context.user_data['current_category'],
                amount=amount
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫
            context.user_data['planning_items'].append(item)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å
            total_planned = sum(item.amount for item in context.user_data['planning_items'])
            remaining = context.user_data['planning_total'] - total_planned
            
            if remaining <= 0:
                # –ü–ª–∞–Ω –∑–∞–≤–µ—Ä—à–µ–Ω
                await self._complete_planning(update, context)
            else:
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
                await update.message.reply_text(
                    f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞: {item.category} - {self.format_amount(float(amount))}\n\n"
                    f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {self.format_amount(float(total_planned))} / {self.format_amount(float(context.user_data['planning_total']))}\n"
                    f"üí∞ –û—Å—Ç–∞–ª–æ—Å—å: {self.format_amount(float(remaining))}\n\n"
                    "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–ª–∏ '–ì–æ—Ç–æ–≤–æ' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:",
                    reply_markup=self.get_back_keyboard()
                )
            
        except ValidationError as e:
            await update.message.reply_text(
                f"‚ùå {e.message}",
                reply_markup=self.get_back_keyboard()
            )
        except Exception as e:
            await self.handle_error(update, context, e)
    
    async def _complete_planning(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∞"""
        try:
            user_id = context.user_data['planning_user_id']
            plan_month = context.user_data['planning_month']
            total_amount = context.user_data['planning_total']
            items = context.user_data['planning_items']
            
            # –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω
            plan = await budget_service.create_budget_plan(
                user_id=user_id,
                plan_month=plan_month,
                total_amount=total_amount,
                items=items
            )
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            response = f"‚úÖ –ü–ª–∞–Ω –±—é–¥–∂–µ—Ç–∞ —Å–æ–∑–¥–∞–Ω!\n\n"
            response += f"üìÖ –ú–µ—Å—è—Ü: {self.format_month_year(plan_month)}\n"
            response += f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞: {self.format_amount(float(total_amount))}\n\n"
            response += f"üìã –ö–∞—Ç–µ–≥–æ—Ä–∏–∏:\n"
            
            for item in items:
                response += f"‚Ä¢ {item.category}: {self.format_amount(float(item.amount))}\n"
            
            await update.message.reply_text(
                response,
                reply_markup=self.get_main_menu_keyboard()
            )
            
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            self._clear_planning_data(context)
            
        except Exception as e:
            await self.handle_error(update, context, e)
    
    async def _show_plans_list(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
        """–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ –ø–ª–∞–Ω–æ–≤"""
        try:
            plans = await budget_service.get_user_budget_plans(user_id)
            
            if not plans:
                await update.message.reply_text(
                    "üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–ª–∞–Ω–æ–≤ –±—é–¥–∂–µ—Ç–∞.",
                    reply_markup=self.get_back_keyboard()
                )
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫
            response = "üìã –í–∞—à–∏ –ø–ª–∞–Ω—ã –±—é–¥–∂–µ—Ç–∞:\n\n"
            
            for i, plan in enumerate(plans, 1):
                response += f"{i}. {self.format_month_year(plan.plan_month)}\n"
                response += f"   üí∞ {self.format_amount(float(plan.total_amount))}\n"
                response += f"   üìä {len(plan.items)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π\n\n"
            
            keyboard = [
                [KeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω"), KeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø–ª–∞–Ω")],
                [KeyboardButton("üîô –ù–∞–∑–∞–¥")]
            ]
            
            await update.message.reply_text(
                response,
                reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            )
            
        except Exception as e:
            await self.handle_error(update, context, e)
    
    def _clear_planning_data(self, context: ContextTypes.DEFAULT_TYPE):
        """–û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        keys_to_remove = [
            'planning_user_id', 'planning_step', 'planning_month', 
            'planning_total', 'planning_items', 'current_category'
        ]
        for key in keys_to_remove:
            context.user_data.pop(key, None)
