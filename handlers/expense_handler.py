"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞—Å—Ö–æ–¥–æ–≤
"""
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ContextTypes
from decimal import Decimal
from datetime import date
from typing import Optional
from handlers.base_handler import BaseHandler
from services.expense_service import expense_service
from services.classification_service import classification_service
from utils import logger, ValidationError, DatabaseError
from utils.validators import Validator

class ExpenseHandler(BaseHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞—Å—Ö–æ–¥–æ–≤"""
    
    async def handle(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        if not await self.check_user_access(update, context):
            return
        
        try:
            text = update.message.text.strip()
            user_id = update.effective_user.id
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–º
            if self._is_expense_input(text):
                await self._process_expense(update, context, text, user_id)
            else:
                await update.message.reply_text(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: —Å—É–º–º–∞ –æ–ø–∏—Å–∞–Ω–∏–µ",
                    reply_markup=self.get_main_menu_keyboard()
                )
                
        except Exception as e:
            await self.handle_error(update, context, e)
    
    def _is_expense_input(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –≤–≤–æ–¥–æ–º —Ä–∞—Å—Ö–æ–¥–∞"""
        if not text:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ —Å —á–∏—Å–ª–∞
        parts = text.split(' ', 1)
        if len(parts) < 2:
            return False
        
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å –≤ —á–∏—Å–ª–æ
            amount_str = parts[0].replace(',', '.')
            float(amount_str)
            return True
        except ValueError:
            return False
    
    async def _process_expense(self, update: Update, context: ContextTypes.DEFAULT_TYPE, 
                              text: str, user_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å—Ö–æ–¥–∞"""
        try:
            # –ü–∞—Ä—Å–∏–º —Å—É–º–º—É –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
            parts = text.split(' ', 1)
            amount_str = parts[0].replace(',', '.')
            description = parts[1].strip()
            
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            amount = Validator.validate_amount(amount_str)
            description = Validator.validate_description(description)
            
            # –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Ä–∞—Å—Ö–æ–¥
            category = classification_service.classify_expense(description)
            confidence = classification_service.get_classification_confidence(description)
            
            # –°–æ–∑–¥–∞–µ–º —Ä–∞—Å—Ö–æ–¥
            expense = await expense_service.create_expense(
                user_id=user_id,
                amount=amount,
                description=description,
                category=category,
                transaction_date=date.today()
            )
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            response = f"‚úÖ –†–∞—Å—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
            response += f"üí∞ –°—É–º–º–∞: {self.format_amount(float(amount))}\n"
            response += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
            response += f"üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
            
            if confidence < 0.7:
                response += f"‚ö†Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.1%})\n"
                response += f"üí° –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ–≤–µ—Ä–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'üîß –ò—Å–ø—Ä–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'"
            
            await update.message.reply_text(
                response,
                reply_markup=self.get_main_menu_keyboard()
            )
            
            logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω —Ä–∞—Å—Ö–æ–¥: {description} ({amount} –¢–≥) –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
        except ValidationError as e:
            await update.message.reply_text(
                f"‚ùå {e.message}",
                reply_markup=self.get_main_menu_keyboard()
            )
        except DatabaseError as e:
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=self.get_main_menu_keyboard()
            )
        except Exception as e:
            await self.handle_error(update, context, e)
    
    async def get_expenses_summary(self, user_id: int, period: str = "month") -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –ø–æ —Ä–∞—Å—Ö–æ–¥–∞–º"""
        try:
            from datetime import datetime, timedelta
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥
            end_date = date.today()
            if period == "today":
                start_date = end_date
            elif period == "week":
                start_date = end_date - timedelta(days=7)
            elif period == "month":
                start_date = end_date.replace(day=1)
            elif period == "year":
                start_date = end_date.replace(month=1, day=1)
            else:
                start_date = end_date.replace(day=1)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–¥–∫—É
            summary = await expense_service.get_expenses_summary(user_id, start_date, end_date)
            
            if not summary['categories']:
                return f"üìä –ó–∞ {period} –Ω–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            response = f"üìä –°–≤–æ–¥–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ {period}:\n\n"
            
            for category_data in summary['categories'][:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-10
                response += f"üè∑Ô∏è {category_data['category']}: {self.format_amount(float(category_data['total_amount']))}\n"
            
            response += f"\nüí∞ –û–±—â–∞—è —Å—É–º–º–∞: {self.format_amount(float(summary['total_amount']))}\n"
            response += f"üìà –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {summary['total_count']}"
            
            return response
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤"
    
    async def get_expenses_by_category(self, user_id: int, category: str, limit: int = 10) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        try:
            from datetime import datetime, timedelta
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü
            end_date = date.today()
            start_date = end_date.replace(day=1)
            
            expenses = await expense_service.get_expenses_by_category(
                user_id, category, start_date, end_date
            )
            
            if not expenses:
                return f"üìä –ù–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            response = f"üìä –†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}':\n\n"
            
            for expense in expenses[:limit]:
                response += f"üí∞ {self.format_amount(float(expense.amount))} - {expense.description}\n"
                response += f"üìÖ {self.format_date(expense.transaction_date)}\n\n"
            
            if len(expenses) > limit:
                response += f"... –∏ –µ—â–µ {len(expenses) - limit} —Ä–∞—Å—Ö–æ–¥–æ–≤"
            
            return response
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
    
    async def delete_expense(self, expense_id: int) -> bool:
        """–£–¥–∞–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞"""
        try:
            return await expense_service.delete_expense(expense_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞ {expense_id}: {e}")
            return False
    
    async def update_expense_category(self, expense_id: int, new_category: str) -> bool:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–∞"""
        try:
            expense = await expense_service.update_expense(expense_id, category=new_category)
            return expense is not None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–∞ {expense_id}: {e}")
            return False
