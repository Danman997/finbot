"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
"""
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ContextTypes
from datetime import date, datetime, timedelta
from typing import Optional, List, Dict, Any
from handlers.base_handler import BaseHandler
from services.expense_service import expense_service
from services.budget_service import budget_service
from utils import logger, DatabaseError

class AnalyticsHandler(BaseHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    
    async def handle(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        if not await self.check_user_access(update, context):
            return
        
        try:
            text = update.message.text.strip()
            user_id = update.effective_user.id
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
            if text == "üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞":
                await self._show_analytics_menu(update, context, user_id)
            elif text == "üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø–ª–∞–Ω–æ–º":
                await self._show_plan_comparison(update, context, user_id)
            elif text in ["–°–µ–≥–æ–¥–Ω—è", "–ù–µ–¥–µ–ª—è", "–ú–µ—Å—è—Ü", "–ì–æ–¥"]:
                await self._show_period_analytics(update, context, user_id, text)
            else:
                await update.message.reply_text(
                    "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞",
                    reply_markup=self.get_main_menu_keyboard()
                )
                
        except Exception as e:
            await self.handle_error(update, context, e)
    
    async def _show_analytics_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
        """–ü–æ–∫–∞–∑ –º–µ–Ω—é –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
        try:
            keyboard = [
                [KeyboardButton("üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø–ª–∞–Ω–æ–º")],
                [KeyboardButton("–°–µ–≥–æ–¥–Ω—è"), KeyboardButton("–ù–µ–¥–µ–ª—è")],
                [KeyboardButton("–ú–µ—Å—è—Ü"), KeyboardButton("–ì–æ–¥")],
                [KeyboardButton("üîô –ù–∞–∑–∞–¥")]
            ]
            
            await update.message.reply_text(
                "üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞:",
                reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            )
            
        except Exception as e:
            await self.handle_error(update, context, e)
    
    async def _show_plan_comparison(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
        """–ü–æ–∫–∞–∑ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å –ø–ª–∞–Ω–æ–º"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
            today = date.today()
            current_month = today.month
            current_year = today.year
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
            plan = await budget_service.get_budget_plan_by_month(user_id, current_month, current_year)
            
            if not plan:
                await update.message.reply_text(
                    f"üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø–ª–∞–Ω–æ–º\n\n"
                    f"–£ –≤–∞—Å –Ω–µ—Ç –ø–ª–∞–Ω–∞ –Ω–∞ {current_month:02d}.{current_year}.\n"
                    f"–°–æ–∑–¥–∞–π—Ç–µ –ø–ª–∞–Ω –≤ —Ä–∞–∑–¥–µ–ª–µ 'üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ'.",
                    reply_markup=self.get_back_keyboard()
                )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
            start_date = date(current_year, current_month, 1)
            end_date = today
            
            expenses_summary = await expense_service.get_expenses_summary(user_id, start_date, end_date)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
            response = f"üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø–ª–∞–Ω–æ–º –∑–∞ {current_month:02d}.{current_year}\n\n"
            
            # –û–±—â–µ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
            planned_total = float(plan.total_amount)
            actual_total = float(expenses_summary['total_amount'])
            difference = actual_total - planned_total
            
            response += f"üí∞ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–ª–æ—Å—å: {self.format_amount(planned_total)}\n"
            response += f"üí∏ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {self.format_amount(actual_total)}\n"
            response += f"üìà –†–∞–∑–Ω–∏—Ü–∞: {self.format_amount(difference)}\n\n"
            
            if difference > 0:
                response += f"‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ –Ω–∞ {self.format_amount(difference)}\n"
            elif difference < 0:
                response += f"‚úÖ –≠–∫–æ–Ω–æ–º–∏—è: {self.format_amount(abs(difference))}\n"
            else:
                response += f"‚úÖ –ü–ª–∞–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω —Ç–æ—á–Ω–æ\n"
            
            # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            response += "\nüìã –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:\n"
            
            # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –ø–ª–∞–Ω–æ–≤—ã—Ö —Å—É–º–º
            planned_categories = {item.category: float(item.amount) for item in plan.items}
            
            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ —Ä–∞—Å—Ö–æ–¥–∞–º–∏
            for category_data in expenses_summary['categories']:
                category = category_data['category']
                actual_amount = float(category_data['total_amount'])
                planned_amount = planned_categories.get(category, 0)
                
                response += f"\nüè∑Ô∏è {category}:\n"
                response += f"   –ü–ª–∞–Ω: {self.format_amount(planned_amount)}\n"
                response += f"   –§–∞–∫—Ç: {self.format_amount(actual_amount)}\n"
                
                if planned_amount > 0:
                    percentage = (actual_amount / planned_amount) * 100
                    response += f"   –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {percentage:.1f}%\n"
                    
                    if percentage > 100:
                        response += f"   ‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –Ω–∞ {self.format_amount(actual_amount - planned_amount)}\n"
                    elif percentage < 80:
                        response += f"   ‚úÖ –≠–∫–æ–Ω–æ–º–∏—è: {self.format_amount(planned_amount - actual_amount)}\n"
            
            await update.message.reply_text(
                response,
                reply_markup=self.get_back_keyboard()
            )
            
        except Exception as e:
            await self.handle_error(update, context, e)
    
    async def _show_period_analytics(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int, period: str):
        """–ü–æ–∫–∞–∑ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥
            end_date = date.today()
            if period == "–°–µ–≥–æ–¥–Ω—è":
                start_date = end_date
                period_name = "—Å–µ–≥–æ–¥–Ω—è"
            elif period == "–ù–µ–¥–µ–ª—è":
                start_date = end_date - timedelta(days=7)
                period_name = "–Ω–µ–¥–µ–ª—é"
            elif period == "–ú–µ—Å—è—Ü":
                start_date = end_date.replace(day=1)
                period_name = "–º–µ—Å—è—Ü"
            elif period == "–ì–æ–¥":
                start_date = end_date.replace(month=1, day=1)
                period_name = "–≥–æ–¥"
            else:
                start_date = end_date.replace(day=1)
                period_name = "–º–µ—Å—è—Ü"
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–¥–∫—É —Ä–∞—Å—Ö–æ–¥–æ–≤
            expenses_summary = await expense_service.get_expenses_summary(user_id, start_date, end_date)
            
            if not expenses_summary['categories']:
                await update.message.reply_text(
                    f"üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∑–∞ {period_name}\n\n"
                    f"–ó–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤.",
                    reply_markup=self.get_back_keyboard()
                )
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É
            response = f"üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∑–∞ {period_name}\n\n"
            response += f"üìÖ –ü–µ—Ä–∏–æ–¥: {self.format_date(start_date)} - {self.format_date(end_date)}\n\n"
            
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            total_amount = float(expenses_summary['total_amount'])
            total_count = expenses_summary['total_count']
            
            response += f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞: {self.format_amount(total_amount)}\n"
            response += f"üìà –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {total_count}\n"
            response += f"üìä –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {self.format_amount(total_amount / total_count if total_count > 0 else 0)}\n\n"
            
            # –¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            response += "üèÜ –¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–π:\n"
            for i, category_data in enumerate(expenses_summary['categories'][:5], 1):
                category = category_data['category']
                amount = float(category_data['total_amount'])
                percentage = (amount / total_amount) * 100 if total_amount > 0 else 0
                
                response += f"{i}. {category}: {self.format_amount(amount)} ({percentage:.1f}%)\n"
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            if period == "–ú–µ—Å—è—Ü":
                # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º –º–µ—Å—è—Ü–µ–º
                prev_month = start_date - timedelta(days=1)
                prev_start = prev_month.replace(day=1)
                prev_end = start_date - timedelta(days=1)
                
                try:
                    prev_summary = await expense_service.get_expenses_summary(user_id, prev_start, prev_end)
                    prev_total = float(prev_summary['total_amount'])
                    
                    if prev_total > 0:
                        change = ((total_amount - prev_total) / prev_total) * 100
                        response += f"\nüìà –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫ –ø—Ä–æ—à–ª–æ–º—É –º–µ—Å—è—Ü—É: {change:+.1f}%\n"
                except:
                    pass
            
            await update.message.reply_text(
                response,
                reply_markup=self.get_back_keyboard()
            )
            
        except Exception as e:
            await self.handle_error(update, context, e)
    
    async def get_expense_trends(self, user_id: int, months: int = 6) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–æ–≤ —Ä–∞—Å—Ö–æ–¥–æ–≤"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –º–µ—Å—è—Ü—ã
            today = date.today()
            trends = []
            
            for i in range(months):
                month_date = today.replace(day=1) - timedelta(days=30 * i)
                start_date = month_date.replace(day=1)
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω–µ—Ü –º–µ—Å—è—Ü–∞
                if month_date.month == 12:
                    end_date = month_date.replace(year=month_date.year + 1, month=1, day=1) - timedelta(days=1)
                else:
                    end_date = month_date.replace(month=month_date.month + 1, day=1) - timedelta(days=1)
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–¥–∫—É –∑–∞ –º–µ—Å—è—Ü
                summary = await expense_service.get_expenses_summary(user_id, start_date, end_date)
                total = float(summary['total_amount'])
                
                trends.append({
                    'month': month_date.strftime('%m.%Y'),
                    'total': total
                })
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            response = "üìà –¢—Ä–µ–Ω–¥—ã —Ä–∞—Å—Ö–æ–¥–æ–≤ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 –º–µ—Å—è—Ü–µ–≤):\n\n"
            
            for trend in reversed(trends):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º
                response += f"{trend['month']}: {self.format_amount(trend['total'])}\n"
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–π —Ä–æ—Å—Ç/—Å–Ω–∏–∂–µ–Ω–∏–µ
            if len(trends) >= 2:
                recent = trends[0]['total']
                previous = trends[1]['total']
                
                if previous > 0:
                    change = ((recent - previous) / previous) * 100
                    if change > 0:
                        response += f"\nüìà –†–æ—Å—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤: {change:+.1f}%"
                    elif change < 0:
                        response += f"\nüìâ –°–Ω–∏–∂–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤: {change:+.1f}%"
                    else:
                        response += f"\n‚û°Ô∏è –†–∞—Å—Ö–æ–¥—ã —Å—Ç–∞–±–∏–ª—å–Ω—ã"
            
            return response
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–æ–≤: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–æ–≤ —Ä–∞—Å—Ö–æ–¥–æ–≤"
    
    async def get_category_analysis(self, user_id: int, category: str) -> str:
        """–ê–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –º–µ—Å—è—Ü–∞
            today = date.today()
            start_date = today.replace(day=1) - timedelta(days=90)
            
            expenses = await expense_service.get_expenses_by_category(
                user_id, category, start_date, today
            )
            
            if not expenses:
                return f"üìä –ù–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –º–µ—Å—è—Ü–∞"
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            total_amount = sum(float(expense.amount) for expense in expenses)
            avg_amount = total_amount / len(expenses)
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –º–µ—Å—è—Ü–∞–º
            monthly_data = {}
            for expense in expenses:
                month_key = expense.transaction_date.strftime('%m.%Y')
                if month_key not in monthly_data:
                    monthly_data[month_key] = {'amount': 0, 'count': 0}
                monthly_data[month_key]['amount'] += float(expense.amount)
                monthly_data[month_key]['count'] += 1
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            response = f"üìä –ê–Ω–∞–ª–∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}':\n\n"
            response += f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞: {self.format_amount(total_amount)}\n"
            response += f"üìà –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {len(expenses)}\n"
            response += f"üìä –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {self.format_amount(avg_amount)}\n\n"
            
            response += "üìÖ –ü–æ –º–µ—Å—è—Ü–∞–º:\n"
            for month, data in sorted(monthly_data.items()):
                response += f"{month}: {self.format_amount(data['amount'])} ({data['count']} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π)\n"
            
            return response
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}'"
