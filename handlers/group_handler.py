"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥—Ä—É–ø–ø
"""
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ContextTypes
from typing import Optional, List
from handlers.base_handler import BaseHandler
from services.group_service import group_service
from services.user_service import user_service
from utils import logger, ValidationError, DatabaseError
from utils.validators import Validator

class GroupHandler(BaseHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥—Ä—É–ø–ø"""
    
    async def handle(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        if not await self.check_user_access(update, context):
            return
        
        try:
            text = update.message.text.strip()
            user_id = update.effective_user.id
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
            if text == "üë• –ì—Ä—É–ø–ø—ã":
                await self._show_groups_menu(update, context, user_id)
            elif text == "‚ûï –°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É":
                await self._start_group_creation(update, context, user_id)
            elif text == "üîó –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –≥—Ä—É–ø–ø–µ":
                await self._start_group_joining(update, context, user_id)
            elif text == "üìã –ú–æ–∏ –≥—Ä—É–ø–ø—ã":
                await self._show_user_groups(update, context, user_id)
            else:
                await update.message.reply_text(
                    "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞",
                    reply_markup=self.get_main_menu_keyboard()
                )
                
        except Exception as e:
            await self.handle_error(update, context, e)
    
    async def _show_groups_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
        """–ü–æ–∫–∞–∑ –º–µ–Ω—é –≥—Ä—É–ø–ø"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_groups = await group_service.get_user_groups(user_id)
            
            if not user_groups:
                keyboard = [
                    [KeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É"), KeyboardButton("üîó –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –≥—Ä—É–ø–ø–µ")],
                    [KeyboardButton("üîô –ù–∞–∑–∞–¥")]
                ]
                message = "üë• –ì—Ä—É–ø–ø—ã\n\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –≥—Ä—É–ø–ø."
            else:
                keyboard = [
                    [KeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É"), KeyboardButton("üîó –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –≥—Ä—É–ø–ø–µ")],
                    [KeyboardButton("üìã –ú–æ–∏ –≥—Ä—É–ø–ø—ã")],
                    [KeyboardButton("üîô –ù–∞–∑–∞–¥")]
                ]
                
                message = "üë• –ì—Ä—É–ø–ø—ã\n\n"
                message += "üìã –í–∞—à–∏ –≥—Ä—É–ø–ø—ã:\n"
                for group in user_groups[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –≥—Ä—É–ø–ø—ã
                    message += f"‚Ä¢ {group.name}\n"
                
                if len(user_groups) > 3:
                    message += f"... –∏ –µ—â–µ {len(user_groups) - 3} –≥—Ä—É–ø–ø"
            
            await update.message.reply_text(
                message,
                reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            )
            
        except Exception as e:
            await self.handle_error(update, context, e)
    
    async def _start_group_creation(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
        """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã"""
        try:
            context.user_data['group_user_id'] = user_id
            context.user_data['group_step'] = 'name'
            
            await update.message.reply_text(
                "‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã:",
                reply_markup=self.get_back_keyboard()
            )
            
        except Exception as e:
            await self.handle_error(update, context, e)
    
    async def _process_group_name(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã"""
        try:
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
            name = Validator.validate_length(text, 2, 50, "–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã")
            
            # –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É
            group = await group_service.create_group(name, context.user_data['group_user_id'])
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            response = f"‚úÖ –ì—Ä—É–ø–ø–∞ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
            response += f"üë• –ù–∞–∑–≤–∞–Ω–∏–µ: {group.name}\n"
            response += f"üîë –ö–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: {group.invitation_code}\n\n"
            response += f"–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —ç—Ç–∏–º –∫–æ–¥–æ–º —Å –¥—Ä—É–≥–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –≥—Ä—É–ø–ø–µ."
            
            await update.message.reply_text(
                response,
                reply_markup=self.get_main_menu_keyboard()
            )
            
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            self._clear_group_data(context)
            
        except ValidationError as e:
            await update.message.reply_text(
                f"‚ùå {e.message}",
                reply_markup=self.get_back_keyboard()
            )
        except Exception as e:
            await self.handle_error(update, context, e)
    
    async def _start_group_joining(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
        """–ù–∞—á–∞–ª–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –≥—Ä—É–ø–ø–µ"""
        try:
            context.user_data['group_user_id'] = user_id
            context.user_data['group_step'] = 'invitation_code'
            
            await update.message.reply_text(
                "üîó –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –≥—Ä—É–ø–ø–µ\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:",
                reply_markup=self.get_back_keyboard()
            )
            
        except Exception as e:
            await self.handle_error(update, context, e)
    
    async def _process_invitation_code(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–¥–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è"""
        try:
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
            invitation_code = Validator.validate_invitation_code(text)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await user_service.get_user(context.user_data['group_user_id'])
            if not user:
                await update.message.reply_text(
                    "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
                    reply_markup=self.get_back_keyboard()
                )
                return
            
            # –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ –≥—Ä—É–ø–ø–µ
            success, message = await group_service.join_group_by_invitation(
                invitation_code, user.id, user.phone or ""
            )
            
            if success:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
                group = await group_service.get_group_by_invitation_code(invitation_code)
                
                response = f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –≥—Ä—É–ø–ø–µ!\n\n"
                response += f"üë• –ì—Ä—É–ø–ø–∞: {group.name if group else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
                response += f"üîë –ö–æ–¥: {invitation_code}"
                
                await update.message.reply_text(
                    response,
                    reply_markup=self.get_main_menu_keyboard()
                )
            else:
                await update.message.reply_text(
                    f"‚ùå {message}",
                    reply_markup=self.get_back_keyboard()
                )
            
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            self._clear_group_data(context)
            
        except ValidationError as e:
            await update.message.reply_text(
                f"‚ùå {e.message}",
                reply_markup=self.get_back_keyboard()
            )
        except Exception as e:
            await self.handle_error(update, context, e)
    
    async def _show_user_groups(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
        """–ü–æ–∫–∞–∑ –≥—Ä—É–ø–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_groups = await group_service.get_user_groups(user_id)
            
            if not user_groups:
                await update.message.reply_text(
                    "üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –≥—Ä—É–ø–ø.",
                    reply_markup=self.get_back_keyboard()
                )
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫
            response = "üìã –í–∞—à–∏ –≥—Ä—É–ø–ø—ã:\n\n"
            
            for i, group in enumerate(user_groups, 1):
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                members_count = await group_service.get_group_members_count(group.id)
                
                response += f"{i}. {group.name}\n"
                response += f"   üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {members_count}/5\n"
                response += f"   üîë –ö–æ–¥: {group.invitation_code}\n"
                response += f"   üìÖ –°–æ–∑–¥–∞–Ω–∞: {self.format_date(group.created_at)}\n\n"
            
            await update.message.reply_text(
                response,
                reply_markup=self.get_back_keyboard()
            )
            
        except Exception as e:
            await self.handle_error(update, context, e)
    
    async def _show_group_members(self, update: Update, context: ContextTypes.DEFAULT_TYPE, group_id: int):
        """–ü–æ–∫–∞–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã
            members = await group_service.get_group_members(group_id)
            
            if not members:
                await update.message.reply_text(
                    "üë• –í –≥—Ä—É–ø–ø–µ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤",
                    reply_markup=self.get_back_keyboard()
                )
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫
            response = "üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ –≥—Ä—É–ø–ø—ã:\n\n"
            
            for i, member in enumerate(members, 1):
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                user = await user_service.get_user(member.user_id)
                username = user.username if user else f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {member.user_id}"
                
                response += f"{i}. {username}\n"
                response += f"   üë®‚Äçüíº –†–æ–ª—å: {member.role}\n"
                response += f"   üìÖ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è: {self.format_date(member.joined_at)}\n\n"
            
            await update.message.reply_text(
                response,
                reply_markup=self.get_back_keyboard()
            )
            
        except Exception as e:
            await self.handle_error(update, context, e)
    
    def _clear_group_data(self, context: ContextTypes.DEFAULT_TYPE):
        """–û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø"""
        keys_to_remove = [
            'group_user_id', 'group_step'
        ]
        for key in keys_to_remove:
            context.user_data.pop(key, None)
