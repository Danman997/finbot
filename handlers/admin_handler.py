"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
"""
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ContextTypes
from typing import Optional, List
from handlers.base_handler import BaseHandler
from services.user_service import user_service
from services.group_service import group_service
from models.user import UserRole
from utils import logger, ValidationError, DatabaseError, AuthorizationError
from utils.validators import Validator

class AdminHandler(BaseHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    async def handle(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        if not await self.check_user_access(update, context):
            return
        
        try:
            user_id = update.effective_user.id
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            if not await self._check_admin_rights(user_id):
                await update.message.reply_text(
                    "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                    reply_markup=self.get_main_menu_keyboard()
                )
                return
            
            text = update.message.text.strip()
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
            if text == "üë• –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è":
                await self._start_user_creation(update, context)
            elif text == "üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π":
                await self._show_users_list(update, context)
            elif text == "üìÅ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–ø–∫–∞–º–∏":
                await self._show_folder_management(update, context)
            elif text == "üîß –†–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π":
                await self._show_roles_management(update, context)
            elif text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã":
                await self._show_system_stats(update, context)
            else:
                await update.message.reply_text(
                    "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞",
                    reply_markup=self.get_admin_menu_keyboard()
                )
                
        except Exception as e:
            await self.handle_error(update, context, e)
    
    async def _check_admin_rights(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        try:
            user = await user_service.get_user(user_id)
            return user and user.is_admin()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
            return False
    
    async def _start_user_creation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            context.user_data['admin_step'] = 'username'
            
            await update.message.reply_text(
                "üë• –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
                reply_markup=self.get_back_keyboard()
            )
            
        except Exception as e:
            await self.handle_error(update, context, e)
    
    async def _process_username_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            username = Validator.validate_username(text)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            context.user_data['new_user_username'] = username
            context.user_data['admin_step'] = 'phone'
            
            await update.message.reply_text(
                f"üë§ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {username}\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–∏–ª–∏ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):",
                reply_markup=self.get_back_keyboard()
            )
            
        except ValidationError as e:
            await update.message.reply_text(
                f"‚ùå {e.message}",
                reply_markup=self.get_back_keyboard()
            )
        except Exception as e:
            await self.handle_error(update, context, e)
    
    async def _process_phone_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
        try:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–æ–ø—É—Å–∫ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            if text.lower() in ['–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å', 'skip', '']:
                phone = None
            else:
                phone = Validator.validate_phone(text)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            context.user_data['new_user_phone'] = phone
            context.user_data['admin_step'] = 'role'
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ä–æ–ª–∏
            keyboard = [
                [KeyboardButton("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"), KeyboardButton("üë®‚Äçüíº –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")],
                [KeyboardButton("üîô –ù–∞–∑–∞–¥")]
            ]
            
            await update.message.reply_text(
                f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {phone or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
                reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            )
            
        except ValidationError as e:
            await update.message.reply_text(
                f"‚ùå {e.message}",
                reply_markup=self.get_back_keyboard()
            )
        except Exception as e:
            await self.handle_error(update, context, e)
    
    async def _process_role_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å
            if "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" in text:
                role = UserRole.ADMIN
            else:
                role = UserRole.USER
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            context.user_data['new_user_role'] = role
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            username = context.user_data['new_user_username']
            phone = context.user_data.get('new_user_phone')
            role_name = "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" if role == UserRole.ADMIN else "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            
            response = f"üë• –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n"
            response += f"üë§ –ò–º—è: {username}\n"
            response += f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {phone or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            response += f"üë®‚Äçüíº –†–æ–ª—å: {role_name}\n\n"
            response += "–°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?"
            
            await update.message.reply_text(
                response,
                reply_markup=self.get_yes_no_keyboard()
            )
            
        except Exception as e:
            await self.handle_error(update, context, e)
    
    async def _confirm_user_creation(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            if text == "‚úÖ –î–∞":
                # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                username = context.user_data['new_user_username']
                phone = context.user_data.get('new_user_phone')
                role = context.user_data['new_user_role']
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–æ)
                import random
                user_id = random.randint(100000, 999999)
                
                user = await user_service.create_user(
                    user_id=user_id,
                    username=username,
                    phone=phone,
                    role=role
                )
                
                await update.message.reply_text(
                    f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω!\n\n"
                    f"üë§ ID: {user_id}\n"
                    f"üë§ –ò–º—è: {username}\n"
                    f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {phone or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
                    f"üë®‚Äçüíº –†–æ–ª—å: {role.value}",
                    reply_markup=self.get_admin_menu_keyboard()
                )
                
                # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                self._clear_admin_data(context)
                
            else:
                await update.message.reply_text(
                    "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–º–µ–Ω–µ–Ω–æ",
                    reply_markup=self.get_admin_menu_keyboard()
                )
                self._clear_admin_data(context)
                
        except Exception as e:
            await self.handle_error(update, context, e)
    
    async def _show_users_list(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            users = await user_service.get_all_users(limit=20)
            
            if not users:
                await update.message.reply_text(
                    "üìã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                    reply_markup=self.get_admin_menu_keyboard()
                )
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫
            response = "üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
            
            for i, user in enumerate(users, 1):
                response += f"{i}. {user.username}\n"
                response += f"   ID: {user.id}\n"
                response += f"   –†–æ–ª—å: {user.role.value}\n"
                response += f"   –°—Ç–∞—Ç—É—Å: {'–ê–∫—Ç–∏–≤–µ–Ω' if user.is_active else '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}\n"
                if user.phone:
                    response += f"   –¢–µ–ª–µ—Ñ–æ–Ω: {user.phone}\n"
                response += "\n"
            
            await update.message.reply_text(
                response,
                reply_markup=self.get_admin_menu_keyboard()
            )
            
        except Exception as e:
            await self.handle_error(update, context, e)
    
    async def _show_folder_management(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–ø–∫–∞–º–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞–ø–æ–∫
            users = await user_service.get_all_users()
            
            total_users = len(users)
            users_with_folders = sum(1 for user in users if user.folder_name)
            
            response = "üìÅ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–ø–∫–∞–º–∏\n\n"
            response += f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
            response += f"üìÅ –° –ø–∞–ø–∫–∞–º–∏: {users_with_folders}\n"
            response += f"üìÇ –ë–µ–∑ –ø–∞–ø–æ–∫: {total_users - users_with_folders}\n\n"
            
            if users_with_folders > 0:
                response += "üìã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –ø–∞–ø–∫–∞–º–∏:\n"
                for user in users[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã—Ö 10
                    if user.folder_name:
                        response += f"‚Ä¢ {user.username}: {user.folder_name}\n"
            
            await update.message.reply_text(
                response,
                reply_markup=self.get_admin_menu_keyboard()
            )
            
        except Exception as e:
            await self.handle_error(update, context, e)
    
    async def _show_roles_management(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–ª—è–º–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–æ–ª–µ–π
            users = await user_service.get_all_users()
            
            role_stats = {}
            for user in users:
                role = user.role.value
                role_stats[role] = role_stats.get(role, 0) + 1
            
            response = "üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏\n\n"
            response += "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–æ–ª–µ–π:\n"
            
            for role, count in role_stats.items():
                response += f"‚Ä¢ {role}: {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
            
            response += f"\nüë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}"
            
            await update.message.reply_text(
                response,
                reply_markup=self.get_admin_menu_keyboard()
            )
            
        except Exception as e:
            await self.handle_error(update, context, e)
    
    async def _show_system_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            users_count = await user_service.get_users_count()
            groups_summary = await group_service.get_groups_summary()
            
            response = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã\n\n"
            response += f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}\n"
            response += f"üë• –ì—Ä—É–ø–ø: {groups_summary['total_groups']}\n"
            response += f"üìä –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –≥—Ä—É–ø–ø–µ: {groups_summary['avg_members_per_group']:.1f}\n\n"
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            response += "üìà –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:\n"
            response += "‚Ä¢ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ\n"
            response += "‚Ä¢ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –¥–æ—Å—Ç—É–ø–Ω—ã\n"
            response += "‚Ä¢ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞\n"
            
            await update.message.reply_text(
                response,
                reply_markup=self.get_admin_menu_keyboard()
            )
            
        except Exception as e:
            await self.handle_error(update, context, e)
    
    def _clear_admin_data(self, context: ContextTypes.DEFAULT_TYPE):
        """–û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è"""
        keys_to_remove = [
            'admin_step', 'new_user_username', 'new_user_phone', 'new_user_role'
        ]
        for key in keys_to_remove:
            context.user_data.pop(key, None)
