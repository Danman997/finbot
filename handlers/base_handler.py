"""
–ë–∞–∑–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
"""
from abc import ABC, abstractmethod
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ContextTypes
from typing import Optional, List, Dict, Any
from utils import logger, check_rate_limit, ValidationError, DatabaseError, RateLimitError

class BaseHandler(ABC):
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    
    def __init__(self):
        self.logger = logger
    
    async def handle_error(self, update: Update, context: ContextTypes.DEFAULT_TYPE, error: Exception):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫"""
        user_id = update.effective_user.id if update.effective_user else 0
        
        if isinstance(error, RateLimitError):
            await update.message.reply_text(
                f"‚è∞ {error.message}",
                reply_markup=self.get_main_menu_keyboard()
            )
        elif isinstance(error, ValidationError):
            await update.message.reply_text(
                f"‚ùå {error.message}",
                reply_markup=self.get_main_menu_keyboard()
            )
        elif isinstance(error, DatabaseError):
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=self.get_main_menu_keyboard()
            )
        else:
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=self.get_main_menu_keyboard()
            )
        
        self.logger.error(f"–û—à–∏–±–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {error}")
    
    async def check_user_access(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            user_id = update.effective_user.id
            check_rate_limit(user_id)
            return True
        except RateLimitError as e:
            await self.handle_error(update, context, e)
            return False
        except Exception as e:
            await self.handle_error(update, context, e)
            return False
    
    def get_main_menu_keyboard(self) -> ReplyKeyboardMarkup:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        keyboard = [
            [KeyboardButton("üí∏ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥"), KeyboardButton("üìä –û—Ç—á–µ—Ç—ã")],
            [KeyboardButton("üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"), KeyboardButton("‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")],
            [KeyboardButton("üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞"), KeyboardButton("üîß –ò—Å–ø—Ä–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")],
            [KeyboardButton("üë• –ì—Ä—É–ø–ø—ã"), KeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å")]
        ]
        return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    def get_back_keyboard(self) -> ReplyKeyboardMarkup:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–æ–π –Ω–∞–∑–∞–¥"""
        keyboard = [[KeyboardButton("üîô –ù–∞–∑–∞–¥")]]
        return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    def get_yes_no_keyboard(self) -> ReplyKeyboardMarkup:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–∞/–Ω–µ—Ç"""
        keyboard = [
            [KeyboardButton("‚úÖ –î–∞"), KeyboardButton("‚ùå –ù–µ—Ç")],
            [KeyboardButton("üîô –ù–∞–∑–∞–¥")]
        ]
        return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    def get_period_keyboard(self) -> ReplyKeyboardMarkup:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞"""
        keyboard = [
            [KeyboardButton("–°–µ–≥–æ–¥–Ω—è"), KeyboardButton("–ù–µ–¥–µ–ª—è")],
            [KeyboardButton("–ú–µ—Å—è—Ü"), KeyboardButton("–ì–æ–¥")],
            [KeyboardButton("üîô –ù–∞–∑–∞–¥")]
        ]
        return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    def get_admin_menu_keyboard(self) -> ReplyKeyboardMarkup:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∞–¥–º–∏–Ω-–º–µ–Ω—é"""
        keyboard = [
            [KeyboardButton("üë• –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"), KeyboardButton("üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")],
            [KeyboardButton("üìÅ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–ø–∫–∞–º–∏"), KeyboardButton("üîß –†–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")],
            [KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã"), KeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ]
        return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    def format_amount(self, amount: float) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É–º–º—ã"""
        return f"{amount:,.2f} –¢–≥"
    
    def format_date(self, date_obj) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã"""
        if hasattr(date_obj, 'strftime'):
            return date_obj.strftime("%d.%m.%Y")
        return str(date_obj)
    
    def format_month_year(self, date_obj) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞ –∏ –≥–æ–¥–∞"""
        if hasattr(date_obj, 'strftime'):
            return date_obj.strftime("%m.%Y")
        return str(date_obj)
    
    def create_keyboard_from_list(self, items: List[str], columns: int = 2) -> ReplyKeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏–∑ —Å–ø–∏—Å–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤"""
        keyboard = []
        for i in range(0, len(items), columns):
            row = items[i:i + columns]
            keyboard.append([KeyboardButton(item) for item in row])
        return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    def create_numbered_keyboard(self, items: List[str], columns: int = 1) -> ReplyKeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
        keyboard = []
        for i, item in enumerate(items, 1):
            keyboard.append([KeyboardButton(f"{i}. {item}")])
        return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    @abstractmethod
    async def handle(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        pass
