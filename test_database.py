"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ database.py
"""

import os
from datetime import date, datetime, time
from database import *

def test_database_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
    try:
        conn = db_manager.get_connection()
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False

def test_user_operations():
    """–¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–π —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    print("\nüë§ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏...")
    
    test_telegram_id = 999999999
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        print(f"–°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {test_telegram_id}...")
        success = create_user(test_telegram_id, "test_user", "TestFolder")
        if success:
            print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return False
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = get_user_by_telegram_id(test_telegram_id)
        if user:
            print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: {user['username']} (ID: {user['id']})")
            user_id = user['id']
        else:
            print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        categories = get_user_categories(user_id)
        if categories:
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {len(categories)} —à—Ç.")
            for cat in categories[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                print(f"   - {cat['category_name']} ({cat['category_type']})")
        else:
            print("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã")
            return False
        
        return user_id
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–ø–µ—Ä–∞—Ü–∏—è—Ö —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏: {e}")
        return False

def test_expense_operations(user_id):
    """–¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–π —Å —Ä–∞—Å—Ö–æ–¥–∞–º–∏"""
    print(f"\nüí∞ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å —Ä–∞—Å—Ö–æ–¥–∞–º–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        categories = get_user_categories(user_id, "expense")
        if not categories:
            print("‚ùå –ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return False
        
        category_id = categories[0]['id']
        category_name = categories[0]['category_name']
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–∞—Å—Ö–æ–¥
        print(f"–î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—Ö–æ–¥ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{category_name}'...")
        success = add_expense(user_id, category_id, 150.75, "–¢–µ—Å—Ç–æ–≤—ã–π —Ä–∞—Å—Ö–æ–¥", date.today())
        if success:
            print("‚úÖ –†–∞—Å—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞")
            return False
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—Ö–æ–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        expenses = get_user_expenses(user_id)
        if expenses:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ä–∞—Å—Ö–æ–¥–æ–≤: {len(expenses)}")
            expense = expenses[0]
            print(f"   - {expense['amount']} —Ä—É–±. –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{expense['category_name']}'")
        else:
            print("‚ùå –†–∞—Å—Ö–æ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return False
        
        # –¢–µ—Å—Ç –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        expenses_by_category = get_expenses_by_category(user_id)
        if expenses_by_category:
            print(f"‚úÖ –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —Ä–∞–±–æ—Ç–∞–µ—Ç: {len(expenses_by_category)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
            for cat_data in expenses_by_category:
                print(f"   - {cat_data['category_name']}: {cat_data['total_amount']} —Ä—É–±.")
        else:
            print("‚ùå –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–ø–µ—Ä–∞—Ü–∏—è—Ö —Å —Ä–∞—Å—Ö–æ–¥–∞–º–∏: {e}")
        return False

def test_budget_plan_operations(user_id):
    """–¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–π —Å –ø–ª–∞–Ω–∞–º–∏ –±—é–¥–∂–µ—Ç–∞"""
    print(f"\nüìä –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –ø–ª–∞–Ω–∞–º–∏ –±—é–¥–∂–µ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞–Ω –±—é–¥–∂–µ—Ç–∞
        plan_name = "–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞–Ω"
        total_amount = 10000.00
        start_date = date.today()
        end_date = date(2024, 12, 31)
        
        print(f"–°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω –±—é–¥–∂–µ—Ç–∞ '{plan_name}'...")
        success = create_budget_plan(user_id, plan_name, total_amount, start_date, end_date)
        if success:
            print("‚úÖ –ü–ª–∞–Ω –±—é–¥–∂–µ—Ç–∞ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∞ –±—é–¥–∂–µ—Ç–∞")
            return False
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        plans = get_user_budget_plans(user_id)
        if plans:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω –ø–ª–∞–Ω: {plans[0]['plan_name']} ({plans[0]['total_amount']} —Ä—É–±.)")
        else:
            print("‚ùå –ü–ª–∞–Ω—ã –±—é–¥–∂–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–ø–µ—Ä–∞—Ü–∏—è—Ö —Å –ø–ª–∞–Ω–∞–º–∏ –±—é–¥–∂–µ—Ç–∞: {e}")
        return False

def test_reminder_operations(user_id):
    """–¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–π —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏"""
    print(f"\n‚è∞ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}...")
    
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        title = "–¢–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"
        description = "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"
        reminder_date = date.today()
        reminder_time = time(12, 0)
        
        print(f"–î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ '{title}'...")
        success = add_reminder(user_id, title, description, reminder_date, reminder_time)
        if success:
            print("‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
            return False
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        reminders = get_user_reminders(user_id)
        if reminders:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {len(reminders)}")
            reminder = reminders[0]
            print(f"   - {reminder['title']} –Ω–∞ {reminder['reminder_date']}")
        else:
            print("‚ùå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–ø–µ—Ä–∞—Ü–∏—è—Ö —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏: {e}")
        return False

def cleanup_test_data(user_id):
    """–û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    print(f"\nüßπ –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}...")
    
    try:
        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª—è—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
        query = "DELETE FROM users WHERE id = %s"
        db_manager.execute_query(query, (user_id,))
        print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("=" * 60)
    print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ë–ê–ó–´ –î–ê–ù–ù–´–• –§–ò–ù–ê–ù–°–û–í–û–ì–û –ë–û–¢–ê")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    required_env_vars = ['DATABASE_HOST', 'DATABASE_NAME', 'DATABASE_USER', 'DATABASE_PASSWORD']
    missing_vars = [var for var in required_env_vars if not os.getenv(var)]
    
    if missing_vars:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing_vars)}")
        print("–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏")
        return
    
    # –¢–µ—Å—Ç 1: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    if not test_database_connection():
        return
    
    # –¢–µ—Å—Ç 2: –û–ø–µ—Ä–∞—Ü–∏–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    user_id = test_user_operations()
    if not user_id:
        return
    
    # –¢–µ—Å—Ç 3: –û–ø–µ—Ä–∞—Ü–∏–∏ —Å —Ä–∞—Å—Ö–æ–¥–∞–º–∏
    if not test_expense_operations(user_id):
        cleanup_test_data(user_id)
        return
    
    # –¢–µ—Å—Ç 4: –û–ø–µ—Ä–∞—Ü–∏–∏ —Å –ø–ª–∞–Ω–∞–º–∏ –±—é–¥–∂–µ—Ç–∞
    if not test_budget_plan_operations(user_id):
        cleanup_test_data(user_id)
        return
    
    # –¢–µ—Å—Ç 5: –û–ø–µ—Ä–∞—Ü–∏–∏ —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏
    if not test_reminder_operations(user_id):
        cleanup_test_data(user_id)
        return
    
    # –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    cleanup_test_data(user_id)
    
    print("\n" + "=" * 60)
    print("‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
    print("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
    print("=" * 60)

if __name__ == "__main__":
    main()
